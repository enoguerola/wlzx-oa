<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:flex="http://www.springframework.org/schema/flex"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/flex
       http://www.springframework.org/schema/flex/spring-flex-1.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	<flex:message-broker />

	<!-- 配置JDBC、Hibernate -->
	

	<bean id="basicDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/wlzx_basic?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;autoReconnect=true" />
		<property name="username" value="root" />
		<property name="password" value="root" />
		 <!-- 连接池启动时的初始值 --> 
        <property name="initialSize" value="1"/> 
        <!-- 连接池的最大值 --> 
        <property name="maxActive" value="500"/> 
        <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 --> 
        <property name="maxIdle" value="3"/> 
        <!--  最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 --> 
        <property name="minIdle" value="2"/> 
        <!--  removeAbandoned true,false,是否清理removeAbandonedTimeout秒没有使用的活动连接,清理后并没有放回连接池 --> 
		 <property name="removeAbandoned" value="true"/>
		<!--  removeAbandonedTimeout 活动连接的最大空闲时间 --> 
		 <property name="removeAbandonedTimeout" value="3600000"/>
		 <!-- logAbandoned true,false,连接池收回空闲的活动连接时是否打印消息  -->
        <property name="logAbandoned" value="true"/> 
        <!-- 每timeBetweenEvictionRunsMillis毫秒秒检查一次连接池中空闲的连接,把空闲时间超过minEvictableIdleTimeMillis毫秒的连接断开,直到连接池中的连接数到minIdle为止； -->
         <property name="timeBetweenEvictionRunsMillis" value="1000"/> 
         <property name="minEvictableIdleTimeMillis" value="60000"/> 
	</bean>

	<bean id="basicHibernateProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="properties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="jdbc.fetch_size">50</prop>
				<prop key="jdbc.batch_size">25</prop>
				<prop key="hibernate.query.substitutions">true 1,false 0</prop>
				<prop key="connection.autoReconnect">true</prop>  
		        <prop key="connection.autoReconnectForPools">true</prop>     
		        <prop key="connection.is-connection-validation-required">true</prop> 
			</props>
		</property>
	</bean>

	<bean id="basicSessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="basicDataSource" />
		<property name="mappingDirectoryLocations">
			<list>
				<value>classpath:mapping/system/wlims/basic</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<ref local="basicHibernateProperties" />
		</property>
	</bean>
	<!-- 配置事务-->
	
	<bean id="basicTxManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="basicDataSource" />
	</bean>
	<tx:advice id="basicTxAdvice" transaction-manager="basicTxManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="insert*" />
			<tx:method name="update*" />
			<tx:method name="delete*" />
		</tx:attributes>
	</tx:advice>
	<aop:aspectj-autoproxy proxy-target-class="true"/> 
	<aop:config proxy-target-class="true">
		<aop:pointcut id="basicOperation" expression="execution(* system.wlims.basic.service.*.*(..))" />
		<aop:advisor advice-ref="basicTxAdvice" pointcut-ref="basicOperation" />
	</aop:config>
</beans>