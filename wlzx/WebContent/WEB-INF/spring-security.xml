<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-3.1.xsd
           http://www.springframework.org/schema/tx
      	   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
           
   <http auto-config="true">
		<!--指定登陆页面、成功页面、失败页面-->
		<form-login login-page="/login.html" default-target-url="/home.html"  always-use-default-target="false" login-processing-url="/j_spring_security_check" authentication-failure-url="/login.html" />
		<intercept-url pattern="/home.html" access="IS_AUTHENTICATED_FULLY"/>
		<intercept-url pattern="/home.swf" access="IS_AUTHENTICATED_FULLY"/>	
		<!--尝试访问没有权限的页面时跳转的页面 -->
		<access-denied-handler error-page="/system/accessDenied.swf" />
		<!--使用记住用户名、密码功能，指定数据源和加密的-->
		<remember-me  user-service-ref="wlzxUserDetailsService"/>
		<!--logout页面，logout后清除session -->
		<logout invalidate-session="true" logout-success-url="/login.html" />
		 <!--session-management是针对session的管理 
		 	 nvalid-session-url=""配置session 失效后跳转的页面
         	 max-sessions="1"同一账号最大登陆次数error-if-maximum-exceeded="true" 禁止同一账户2次登陆; false允许2次登陆并后登陆的账号会挤掉第一次登陆的账号  
             session-fixation-protection="none" 防止伪造sessionid攻击. 
          -->  
         <session-management session-fixation-protection="none" invalid-session-url="/login.html">  
            <concurrency-control max-sessions="1" error-if-maximum-exceeded="false"/>
         </session-management>
          <!--增加一个filter，这点与Acegi是不一样的，不能修改默认的filter了，这个filter位于FILTER_SECURITY_INTERCEPTOR之前 -->
        <custom-filter before="FILTER_SECURITY_INTERCEPTOR"  ref="wlzxUrlFilter" /> 
	</http>
    <!-- 一个自定义的UrlFilter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性，我们的所有控制将在这三个类中实现，解释详见具体配置 -->
    <beans:bean id="wlzxUrlFilter" class="system.components.WlzxUrlFilterSecurityInterceptor">
        <beans:property name="authenticationManager" ref="wlzxAuthenticationManager" />
        <beans:property name="accessDecisionManager" ref="wlzxAccessDecisionManagerBean" />
        <beans:property name="securityMetadataSource" ref="wlzxUrlSecurityMetadataSource" />
    </beans:bean>
    <!-- 一个自定义的MethodFilter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性，我们的所有控制将在这三个类中实现，解释详见具体配置 -->
    <beans:bean id="wlzxMethodFilter" class="org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor">
        <beans:property name="authenticationManager" ref="wlzxAuthenticationManager" />
        <beans:property name="accessDecisionManager" ref="wlzxAccessDecisionManagerBean" />
        <beans:property name="securityMetadataSource" ref="wlzxMethodSecurityMetadataSource" />
    </beans:bean>      
    <!-- 认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
    <authentication-manager alias="wlzxAuthenticationManager">
        <authentication-provider user-service-ref="wlzxUserDetailsService">
            <!--如果用户的密码采用加密的话，可以加点“盐”-->
            <password-encoder hash="md5" />
        </authentication-provider>
    </authentication-manager>
    
	<!-- 用户信息服务 -->
	<beans:bean id="wlzxUserDetailsService" class="system.components.WlzxUserDetailsService">
		<beans:property name="userDao" ref="userDAO"/>
	</beans:bean>
	
    <!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
    <beans:bean id="wlzxAccessDecisionManagerBean"  class="system.components.WlzxAccessDecisionManager">
    </beans:bean>
    
    <!-- Url资源源数据定义，即定义某一资源可以被哪些角色访问 -->
    <beans:bean id="wlzxUrlSecurityMetadataSource"  class="system.components.WlzxUrlInvocationSecurityMetadataSource"  init-method="loadResourceDefine">
     	<beans:property name="resourcesDao" ref="dataAccessModeDAO" />
     	<beans:property name="roleDao" ref="roleDAO" />
    </beans:bean>
     <!-- Method资源源数据定义，即定义某一资源可以被哪些角色访问 -->
    <beans:bean id="wlzxMethodSecurityMetadataSource"  class="system.components.WlzxMethodInvocationSecurityMetadataSource" init-method="loadResourceDefine">
     	<beans:property name="resourcesDao" ref="dataAccessModeDAO" />
     	<beans:property name="roleDao" ref="roleDAO" />
    </beans:bean>
 	<!--  通过AOP方式将方法需要的权限进行获取 --> 
	 <aop:config>
	  <aop:pointcut id="systemSecurityPointcut" expression="execution(* system.service.*.*(..))" /> 
	  <aop:advisor advice-ref="wlzxMethodFilter" pointcut-ref="systemSecurityPointcut" order="1" /> 
	 </aop:config>
	 <aop:config>
	  <aop:pointcut id="basicSecurityPointcut" expression="execution(* system.wlims.basic.service.*.*(..))" /> 
	  <aop:advisor advice-ref="wlzxMethodFilter" pointcut-ref="basicSecurityPointcut" order="1" /> 
	 </aop:config>
	 <aop:config>
	  <aop:pointcut id="oaSecurityPointcut" expression="execution(* system.wlims.oa.service.*.*(..))" /> 
	  <aop:advisor advice-ref="wlzxMethodFilter" pointcut-ref="oaSecurityPointcut" order="1" /> 
	 </aop:config>
</beans:beans>