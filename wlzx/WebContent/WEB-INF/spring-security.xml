<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-3.1.xsd
           http://www.springframework.org/schema/tx
      	   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
    <!-- 未登录的切入点 -->
	<beans:bean id="authenticationProcessingFilterEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<beans:property name="loginFormUrl" value="/login.html"></beans:property>
	</beans:bean>
    <http pattern="/login.html" security="none" />   
    <http use-expressions="false" entry-point-ref="authenticationProcessingFilterEntryPoint">
    	<intercept-url pattern="/home.html" access="IS_AUTHENTICATED_FULLY"/>
		<intercept-url pattern="/home.swf" access="IS_AUTHENTICATED_FULLY"/>
		<intercept-url pattern="/config.html" access="ROLE_SUPER_ROOT"/>
		<intercept-url pattern="/config.swf" access="ROLE_SUPER_ROOT"/>
        <!-- 实现免登陆验证 -->
        <remember-me />
        <!--logout页面，logout后清除session -->
		<logout invalidate-session="true"/>
		
         <session-management session-fixation-protection="migrateSession" invalid-session-url="/timeout.jsp">  
            <concurrency-control max-sessions="1" error-if-maximum-exceeded="false"/>
         </session-management>
       
       	<custom-filter ref="loginFilter" position="FORM_LOGIN_FILTER"  />
		<custom-filter ref="wlzxUrlFilter" before="FILTER_SECURITY_INTERCEPTOR"/>
		 <!-- 注销过滤器 -->
        <custom-filter before="LOGOUT_FILTER" ref="logoutFilter"/>
    </http>

	 <!-- 注销过滤器，完成前台用户注销时的定向功能 -->
    <beans:bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
        <beans:constructor-arg value="/login.html" />
        <beans:constructor-arg>
            <beans:list>
                <beans:bean class="system.components.MyLogoutHandler" />
            </beans:list>
        </beans:constructor-arg>
        <beans:property name="filterProcessesUrl" value="/j_spring_security_logout" />
    </beans:bean>
	<!-- 登录验证器 -->
    <beans:bean id="loginFilter" class="system.components.MyUsernamePasswordAuthenticationFilter">
		<!-- 处理登录的action -->
		<beans:property name="filterProcessesUrl" value="/j_spring_security_check"></beans:property>
        <!-- 验证成功后的处理-->
		<beans:property name="authenticationSuccessHandler" ref="loginSuccessHandler"></beans:property>
        <!-- 验证失败后的处理-->
		<beans:property name="authenticationFailureHandler" ref="loginFailureHandler"></beans:property>
		<beans:property name="authenticationManager" ref="wlzxAuthenticationManager"></beans:property>
		<!-- 注入userService为了查询相应的用户 -->
		<beans:property name="userDAO" ref="userDAO"></beans:property>
	</beans:bean>
	<beans:bean id="loginSuccessHandler" class="system.components.MyAccessAuthenticationSuccessHandler">
			<beans:property name="userDAO" ref="userDAO" />
	</beans:bean>
	<beans:bean id="loginFailureHandler" class="system.components.MyAccessAuthenticationFailureHandler"/>
	
    <!-- 一个自定义的UrlFilter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性，我们的所有控制将在这三个类中实现，解释详见具体配置 -->
    <beans:bean id="wlzxUrlFilter" class="system.components.WlzxUrlFilterSecurityInterceptor">
        <beans:property name="authenticationManager" ref="wlzxAuthenticationManager" />
        <beans:property name="accessDecisionManager" ref="wlzxAccessDecisionManagerBean" />
        <beans:property name="securityMetadataSource" ref="wlzxUrlSecurityMetadataSource" />
    </beans:bean>
    <!-- 一个自定义的MethodFilter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性，我们的所有控制将在这三个类中实现，解释详见具体配置 -->
    <beans:bean id="wlzxMethodFilter" class="org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor">
        <beans:property name="authenticationManager" ref="wlzxAuthenticationManager" />
        <beans:property name="accessDecisionManager" ref="wlzxAccessDecisionManagerBean" />
        <beans:property name="securityMetadataSource" ref="wlzxMethodSecurityMetadataSource" />
    </beans:bean>      
    <!-- 认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
    <authentication-manager alias="wlzxAuthenticationManager">
        <authentication-provider user-service-ref="wlzxUserDetailsService"/>
    </authentication-manager>
    
	<!-- 用户信息服务 -->
	<beans:bean id="wlzxUserDetailsService" class="system.components.WlzxUserDetailsService">
		<beans:property name="userDAO" ref="userDAO"/>
		<beans:property name="roleDAO" ref="roleDAO" />
		<beans:property name="resourcesDao" ref="dataAccessModeDAO" />
		<beans:property name="drDAO" ref="drDAO" />
	</beans:bean>
	
    <!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
    <beans:bean id="wlzxAccessDecisionManagerBean"  class="system.components.WlzxAccessDecisionManager">
    </beans:bean>
    
    <!-- Url资源源数据定义，即定义某一资源可以被哪些角色访问 -->
    <beans:bean id="wlzxUrlSecurityMetadataSource"  class="system.components.WlzxUrlInvocationSecurityMetadataSource"  init-method="loadResourceDefine">
     	<beans:property name="resourcesDao" ref="dataAccessModeDAO" />
     	<beans:property name="drDAO" ref="drDAO" />
    </beans:bean>
     <!-- Method资源源数据定义，即定义某一资源可以被哪些角色访问 -->
    <beans:bean id="wlzxMethodSecurityMetadataSource"  class="system.components.WlzxMethodInvocationSecurityMetadataSource" init-method="loadResourceDefine">
     	<beans:property name="resourcesDao" ref="dataAccessModeDAO" />
     	<beans:property name="drDAO" ref="drDAO" />
    </beans:bean>
 	<!--  通过AOP方式将方法需要的权限进行获取 --> 
	 <aop:config>
	  <aop:pointcut id="systemSecurityPointcut" expression="execution(* system.service.*.*(..))" /> 
	  <aop:advisor advice-ref="wlzxMethodFilter" pointcut-ref="systemSecurityPointcut" order="1" /> 
	 </aop:config>
	 <aop:config>
	  <aop:pointcut id="basicSecurityPointcut" expression="execution(* system.wlims.basic.service.*.*(..))" /> 
	  <aop:advisor advice-ref="wlzxMethodFilter" pointcut-ref="basicSecurityPointcut" order="1" /> 
	 </aop:config>
	 <aop:config>
	  <aop:pointcut id="oaSecurityPointcut" expression="execution(* system.wlims.oa.service.*.*(..))" /> 
	  <aop:advisor advice-ref="wlzxMethodFilter" pointcut-ref="oaSecurityPointcut" order="1" /> 
	 </aop:config>
	 <!-- 国际化信息 -->
	<beans:bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<beans:property name="basename" value="classpath:i18n/messages_zh_CN"/>
	</beans:bean>
</beans:beans>