<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" 
		   layout="vertical"  verticalGap="0" creationComplete="init();" width="100%" pageTitle="办公自动化系统主页" height="100%"
		   xmlns:flexlib="http://code.google.com/p/flexlib/"  xmlns:viewers="flexlib.scheduling.scheduleClasses.viewers.*" 
		   xmlns:sliderClasses="flexlib.controls.sliderClasses.*" xmlns:baseClasses="flexlib.baseClasses.*">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<!--定义 RemoteObject 组件-->
		<mx:RemoteObject id="systemServiceRO" destination="systemServiceDest" showBusyCursor="true" fault="systemFaultHandler(event);">
			<mx:method name="getAuthorizationMenusBySystem"  concurrency="last"  result="getAuthorizationMenusBySystem_resultHandler(event);" />
		</mx:RemoteObject>
		<s:Move id="hideEffect" xTo="{-this.stage.width}" />
		<s:Move id="showEffect" xFrom="{this.stage.width}"/> 
		
	</fx:Declarations>
	<fx:Style source="home.css"/>
	<fx:Script>
		<![CDATA[
			import com.benstucki.utilities.IconUtility;
			
			import flashx.textLayout.formats.BackgroundColor;
			
			import flexlib.controls.IconLoader;
			import flexlib.controls.SuperTabBar;
			import flexlib.controls.iconLoaderClasses.IconParserFactory;
			import flexlib.controls.tabBarClasses.SuperTab;
			import flexlib.events.TabReorderEvent;
			
			import mx.collections.ArrayCollection;
			import mx.containers.*;
			import mx.controls.*;
			import mx.core.FlexGlobals;
			import mx.core.IVisualElement;
			import mx.effects.Fade;
			import mx.effects.Rotate;
			import mx.effects.easing.*;
			import mx.events.*;
			import mx.events.ModuleEvent;
			import mx.managers.PopUpManager;
			import mx.modules.*;
			import mx.modules.IModuleInfo;
			import mx.modules.ModuleManager;
			import mx.rpc.events.*;
			
			import spark.components.*;
			
			import system.component.WlzxLockWin;
			import system.entity.*;
			import system.event.BaseEvent;
			import system.utils.CommonUtils;
			private var fade:Fade;
			private var rotate:Rotate;
			private var _moduleInfo:IModuleInfo;
			private var delayTimer:Timer;
			private function init():void {
				//	lockWin();
				systemServiceRO.getAuthorizationMenusBySystem("oa");
				
				
				//				Alert.show(this.parentApplication.account);
				account.text=account.text.concat(this.parentApplication.account);
				//				roles.text=roles.text.concat(this.parentApplication.roles);
				//				mainRole.text=mainRole.text.concat(this.parentApplication.mainRole);
				delayTimer=new Timer(4000);//延迟三秒读取application中用户信息
				delayTimer.addEventListener(TimerEvent.TIMER, loadApplicationUserInfo);
				delayTimer.start();
				
				
				
				//				Alert.show("aa");
				//				lastLoginTime.text=lastLoginTime.text.concat(this.parentApplication.lastLoginTime);
				//				var timer:Timer = new Timer(1000);			
				//				timer.addEventListener(TimerEvent.TIMER, updateCurrentTime);				
				//				timer.start();
				//				currentTime.text=currentTime.text.concat(this.parentApplication.lastLoginTime);
				initCompents();
				
				addGuiListeners(); 
				
				initHomeTab();
				
			}
			private function loadApplicationUserInfo(event:TimerEvent):void{
				var rolesIds:String=parentApplication.currentUser.getAllRoleIds();
				var roleDesc:String="";
				if(rolesIds!=null&&rolesIds!=""){
					var rolesIds_attr:Array=rolesIds.split(";");
					for(var i:int=0;i<rolesIds_attr.length;i++){
						if(rolesIds_attr[i]!=null&&rolesIds_attr[i]!='')
							roleDesc+=(this.parentApplication.getRoleNameById(rolesIds_attr[i])+" | ");
					}
					
				}
				roles.text=roles.text.concat(roleDesc);
				var mainRoleDesc:String="";
				if(parentApplication.currentUser.mainDR!=null){
					var mainRoleId:String=parentApplication.currentUser.mainDR.roleId;
					mainRoleDesc=parentApplication.getRoleNameById(mainRoleId);
					mainRole.text=mainRole.text.concat(mainRoleDesc);
				}
				
				
				var mainDepartmentDesc:String="";
				if(parentApplication.currentUser.mainDR!=null){
					var mainDepartmentId:String=parentApplication.currentUser.mainDR.departmentId;
					mainDepartmentDesc=parentApplication.getDepartmentNameById(mainDepartmentId);
					mainDepartment.text=mainDepartment.text.concat(mainDepartmentDesc);
				}
				
				
				if(parentApplication.currentUser.name=="super_root"){
					
					mainRole.text=mainRole.text.concat("超级管理员角色");
					roles.text=roles.text.concat("超级管理员角色");
					mainDepartment.text=mainDepartment.text.concat("任意部门");
				}
				delayTimer.stop();
				
			}
			private function updateCurrentTime(event:TimerEvent):void{
				//				currentTime.text=CommonUtils.formatDate(new Date());
			}
			private function getAuthorizationMenusBySystem_resultHandler(event:ResultEvent):void {
				//Alert.show("bb");
				
				var rootSystem:SystemModel =SystemModel(event.result);
				
				var menuList:ArrayCollection = ArrayCollection(rootSystem.menus);
				CommonUtils.sortBySequence(menuList);
				//				trace(menuList.toString()+"");
				//Alert.show("aaaaaa");
				menus.historyManagementEnabled = true;
				makeAccordion(menuList);
				unLockWin();
			}
			
			private function systemFaultHandler(event:FaultEvent):void {
				unLockWin();
				Alert.show(event.fault.faultString, 'Error');
				
			}
			//			[Embed(source="../WebContent/resources/oa/menuIcon/oa_inside_affair.png")]
			//			private const oa_inside_affair:Class;
			//			[Embed(source="../WebContent/resources/oa/menuIcon/oa_official_document.png")]
			//			private const oa_official_document:Class;
			//			[Embed(source="../WebContent/resources/oa/menuIcon/oa_public_affair.png")]
			//			private const oa_public_affair:Class;
			//			[Embed(source="../WebContent/resources/oa/menuIcon/oa_school_affair.png")]
			//			private const oa_school_affair:Class;
			//			[Embed(source="../WebContent/resources/oa/menuIcon/oa_system_management.png")]
			//			private const oa_system_management:Class;
			//			[Embed(source="../WebContent/resources/oa/menuIcon/human_resource.png")]
			//			private const human_resource:Class;
			//			[Embed(source="../WebContent/resources/oa/menuIcon/personal_office.png")]
			//			private const personal_office:Class;
			
			
			private function makeAccordion(menuList:ArrayCollection):void{
				var vbox:VBox =null;
				
				var tree:Tree =null;
				for (var i:int = 0; i < menuList.length; i++){	
					var _menu:MenuModel = MenuModel(menuList.getItemAt(i));						
					vbox = new VBox();
					vbox.percentHeight=100;
					vbox.percentWidth=100;
					vbox.setStyle("borderVisible",false);
					
					vbox.label=_menu.name;
					//					//bad code
					//					if(_menu.menuIcon=='oa_system_management')nc.icon=oa_system_management;
					//					else if(_menu.menuIcon=='oa_school_affair')nc.icon=oa_school_affair;
					//					else if(_menu.menuIcon=='oa_inside_affair')nc.icon=oa_inside_affair;
					//					else if(_menu.menuIcon=='oa_public_affair')nc.icon=oa_public_affair;
					//					else if(_menu.menuIcon=='oa_official_document')nc.icon=oa_official_document;
					//					else if(_menu.menuIcon=='human_resource')nc.icon=human_resource;
					//					else if(_menu.menuIcon=='personal_office')nc.icon=personal_office;
					vbox.icon=IconUtility.getClass(vbox,_menu.menuIcon,16,16);
					if(ArrayCollection(_menu.children).length>0){
						var resultXML:String=buildSubMenus(_menu);
						var menuData:XML=new XML(resultXML);
						tree=new Tree();
						tree.setStyle("borderVisible",false);
						tree.setStyle("fontSize","12");
						tree.percentWidth=99;    // 99% Changed by William
						tree.percentHeight=100;
						tree.showRoot=false;
						tree.labelField="@label";
						tree.setStyle("textAlign","left");
						tree.setStyle("paddingLeft","10");
						tree.doubleClickEnabled=true;
						tree.addEventListener(ListEvent.ITEM_DOUBLE_CLICK ,dbClickMenuItem);
						tree.dataProvider=menuData;
						tree.addEventListener(ListEvent.ITEM_CLICK,clickLeafMenuItem);
						vbox.addElement(tree);
					}
					menus.addChild(vbox);
				}
				
			}
			public function dbClickMenuItem(event:Event):void{ 
				var tree:Tree=Tree(event.target);
				var selectedNode:XML=tree.selectedItem as XML; 
				if(selectedNode.children().length()!=0){
					if(tree.openItems.indexOf(tree.selectedItem)!=-1){
						tree.expandChildrenOf(tree.selectedItem,false);
					}else{
						tree.expandChildrenOf(tree.selectedItem,true);
					}
					
					
				}
				//	addTab(selectedNode.@symbol,selectedNode.@label,nav,selectedNode.@url,null,selectedNode.@parms);
				//else {
				//Alert.show("a");
				//}
				//Alert.show(selectedNode.@label);
			} 
			public function clickLeafMenuItem(event:Event):void{ 
				var selectedNode:XML=Tree(event.target).selectedItem as XML; 
				if(selectedNode.children().length()==0)
					addTab(selectedNode.@symbol,selectedNode.@label,nav,selectedNode.@url,null,selectedNode.@parms);
				//				else {
				//					Alert.show("a");
				//				}
				//Alert.show(selectedNode.@label);
			} 
			private function buildSubMenus(menu:MenuModel):String{
				var resultXML:String="";
				var menuList:ArrayCollection = ArrayCollection(menu.children);
				CommonUtils.sortBySequence(menuList);
				if(menuList.length>0){
					resultXML=resultXML.concat("<node symbol='"+menu.symbol+"' label='"+menu.name+"'>");
					for (var i:int = 0; i < menuList.length; i++){
						var _menu:MenuModel = MenuModel(menuList.getItemAt(i));	
						resultXML=resultXML.concat(buildSubMenus(_menu));
					}
					resultXML=resultXML.concat("</node>");
				}		
				else resultXML=resultXML.concat("<node symbol='"+menu.symbol+"' label='"+menu.name+"' url='"+menu.getUrl()+"' parms='"+menu.getParms()+"'/>");				
				
				return resultXML;
			}
			private var homeTabTitle:String="主页";
			private var homeTabSymbol:String="main";
			private function showHideLeftbody_handler(event:MouseEvent):void{
				if(menus.visible){
					menus.width=0;
				}else{
					menus.width=160;
				}
				menus.visible=!menus.visible;
			}
			
			
			[Embed(source="../WebContent/resources/common/icon/Home.png")]
			private var home_icon:Class;
			private function initHomeTab():void {	
				addTab(homeTabSymbol,homeTabTitle, nav, "oa/indexMainHomeBody.swf", home_icon);
				
			}
			private var errorPageUrl:String="system/accessDenied.swf";
			public function addTab(symbol:String,title:String, navigator:SuperTabNavigator, moduleUrl:String=null, icon:Class=null,parms:String=null):void {
				for(var i:int=0;i<navigator.getChildren().length;i++){
					// 将对象转换为一个泛型
					var obj:* = navigator.getChildAt(i);
					if(obj.name == symbol){
						navigator.selectedIndex = i;
						//	obj.child.search();
						//	obj.child.dispatchEvent(new BaseEvent(BaseEvent.Reload));
						//Alert.show(obj.child);
						obj.child.search();
						if(symbol == "noticeDetial"){
							obj.child.detail();
						}
						return;
					}
				}
				
				var curNum:Number = nav.numChildren + 1;			
				var child:ModuleLoader = new ModuleLoader();				
				child.setStyle("closable", true);
				child.percentHeight=100;
				child.percentWidth=100;
				child.label = title;
				child.name = symbol;				
				child.icon = icon;	
				child.url = moduleUrl+"?uid=" + new Date().getTime();
				child.setStyle( "backgroundColor","0xEEF0FF");  // 这里修改为EEFOFF的目的是与TabNavigator的背景保持一致。
				//child.setStyle( "backgroundColor","0xFFFFFF");
				child.owner=this;
				child.id=parms;//传递参数用
				//Flex 使用ModuleLoader调用多模块时出现强制类型转换错误的解决方法
				child.applicationDomain=ApplicationDomain.currentDomain;
				callLater(child.loadModule);
				
				child.addEventListener( ModuleEvent.READY,function(event:ModuleEvent):void{
					child.removeAllChildren();
				}); 
				child.addEventListener( ModuleEvent.ERROR,function(e:ModuleEvent):void{
					child.removeAllChildren();
					child.url = errorPageUrl;
					//	Alert.show("模块加载错误，这可能是用户长时间未操作导致的用户认证过期，请重新登录操作。如果仍存在问题，请检查网络或联系系统管理员","提示",Alert.YES,null,exitCallBack);
					//					Alert.show("你确定要退出系统吗?","确认",Alert.YES,null,exitCallBack);
				}); 
				//				var bar:ProgressBar=new ProgressBar();
				//				bar.minimum=0;
				//				bar.visible=true;
				//				bar.maximum=100;
				//				bar.percentWidth=100;
				//				bar.direction=ProgressBarDirection.RIGHT;
				//				
				//				bar.labelPlacement="bottom"
				//				child.addEventListener( ModuleEvent.PROGRESS,function(e:ModuleEvent):void{
				//					if(!child.contains(bar))child.addChild(bar);
				//					bar.mode=ProgressBarMode.POLLED;
				//					
				//					bar.label = "当前模块加载进度："+Math.round(e.bytesLoaded * 100 / e.bytesTotal) + "%";
				////					Alert.show(bar.label);
				//					bar.setProgress(e.bytesLoaded,e.bytesTotal);	
				//					bar.validateNow();
				//				});
				
				//				fade = new Fade();
				// Rotate effect
				//				rotate = new Rotate();
				//				rotate.angleFrom = -180;
				//				rotate.angleTo = 0;
				//				rotate.easingFunction = Elastic.easeInOut;
				//				rotate.duration = 1000;
				var fadeIn:Fade = new Fade();
				fadeIn.duration=100;
				fadeIn.alphaFrom=0;
				fadeIn.alphaTo=1;
				var fadeOut:Fade = new Fade();
				fadeOut.duration=100;
				fadeOut.alphaFrom=1;
				fadeOut.alphaTo=0;
				child.setStyle("showEffect", fadeIn);
				child.setStyle("hideEffect", fadeOut);
				
				navigator.addChild(child as DisplayObject);
				if(navigator.selectedIndex!=0){
					navigator.getTabAt(navigator.getChildIndex(child)).contextMenu=tabMenu;  
					//添加双击tab页事件监听   
					navigator.getTabAt(navigator.getChildIndex(child)).addEventListener(MouseEvent.DOUBLE_CLICK,tab_closeHandler);   
				}
				navigator.selectedIndex = navigator.getChildIndex(child);
				navigator.setClosePolicyForTab(0, SuperTab.CLOSE_NEVER);
			}
			
			
			
			//			protected function onModuleProgress (e:ModuleEvent) : void {    
			//				ProgressBashow("[MyFlexHero]:ModuleEvent.PROGRESS 当前已经加载了: " + e.bytesLoaded + " of " + e.bytesTotal + " loaded.");   
			//			} 
			private var window:WlzxLockWin=null;
			private function lockWin():void{
				
				window=WlzxLockWin(PopUpManager.createPopUp(this,WlzxLockWin,true)); 
				PopUpManager.centerPopUp(window);
				window.percentHeight=100;
				window.percentWidth=100;			
				
			}
			private function unLockWin():void{
				if(window!=null)
					PopUpManager.removePopUp(window);
			}
			private function homeTab():void{
				// TODO Auto-generated method stub
				initHomeTab();
				nav.selectedIndex = 0;
			}
			private function exitSystem():void{
				// TODO Auto-generated method stub
				Alert.show("你确定要退出系统吗?","确认",Alert.YES | Alert.NO,null,exitCallBack);
				
			}
			//具体执行退出操作
			private function exitCallBack(event:CloseEvent):void
			{
				if(event.detail == Alert.YES)
				{
					this.parentApplication.logoutRequest.send();
				}
			}
			
			
			protected function image_mouseOverHandler(event:MouseEvent):void
			{
				event.target.alpha=2;
				event.target.width+=2;
				event.target.height+=2;
			}
			
			
			protected function image_mouseOutHandler(event:MouseEvent):void
			{
				event.target.alpha=1.5;
				event.target.width-=2;
				event.target.height-=2;
			}
			
			
			protected function nav_changeHandler(event:IndexChangedEvent):void
			{
				// TODO Auto-generated method stub
				//Alert.show(event.newIndex+"");
				var container:* = nav.getChildAt(event.newIndex);
				var m:Object=container.child as Object;
				if(m!=null&&"search" in m){
					m.search();
				}
			}
			import flexlib.events.SuperTabEvent;
			private var tabMenu:ContextMenu;   
			private var  close_cur:String="关闭当前页";   
			private var  close_other:String="关闭其他页";   
			private var  close_all:String="关闭所有页";   
			private var closeTabItem:ContextMenuItem;   
			private var closeOthersItem:ContextMenuItem;   
			private var closeAllItem:ContextMenuItem;   
			//初始化某些组件   
			private function initCompents():void{   
				tabMenu = new ContextMenu();   
				closeTabItem = new ContextMenuItem(close_cur);   
				closeOthersItem = new ContextMenuItem(close_other);   
				closeAllItem = new ContextMenuItem(close_all);   
				tabMenu.hideBuiltInItems();   
				tabMenu.customItems.push(closeTabItem);   
				tabMenu.customItems.push(closeOthersItem);   
				tabMenu.customItems.push(closeAllItem);   
				
				
				
			}   
			private function addGuiListeners():void{   
				closeTabItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,tabRightMenuHandler);   
				closeOthersItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,tabRightMenuHandler);   
				closeAllItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,tabRightMenuHandler);   
				tabMenu.addEventListener(ContextMenuEvent.MENU_SELECT,tabMenuHandler);   
				//nav.addEventListener(SuperTabEvent.TAB_CLOSE,closeSuperTabHandler);   
				
			}
			//处理tab右键关闭事件   
			private function tabRightMenuHandler(ev:ContextMenuEvent):void{   
				var cap:String = (ev.target as ContextMenuItem).caption;   
				var home:* = nav.getChildAt(0);   
				var idx:int;   
				switch(cap){   
					case close_cur:   
						idx = nav.selectedIndex;   
						if(idx >= 0)   
							nav.removeChildAt(idx);   
						break;   
					case close_other:   
						var selected:* = nav.selectedChild;   
						for each(var cnt:* in nav.getChildren()){   
						if(cnt != selected && cnt != home){   
							nav.removeChild(cnt);   
						}   
					}   
						break;   
					case close_all:   
						//                      nav.removeAllChildren();   
						for each(var tab:* in nav.getChildren()){   
						if(tab != home)   
							nav.removeChild(tab);   
					}   
						break;   
				}   
			}   
			
			private function tabMenuHandler(ev:ContextMenuEvent):void{   
				var tag:DisplayObject=ev.mouseTarget as DisplayObject;   
				var idx:uint=nav.selectedIndex;   
				if(tag){   
					closeTabItem.visible = true;   
					closeOthersItem.visible = true;   
					closeAllItem.visible = true;   
					if(idx==0)   
						closeTabItem.enabled = false;   
					else  
						closeTabItem.enabled = true;   
					
					if(nav.numChildren==1 || (nav.numChildren==2 && idx>0))   
						closeOthersItem.enabled = false;   
					else  
						closeOthersItem.enabled = true;   
					
					if(nav.numChildren==1 && idx==0)   
						closeAllItem.enabled = false;   
					else  
						closeAllItem.enabled = true;   
					
					return;   
				}   
				closeTabItem.visible = false;   
				closeOthersItem.visible = false;   
				closeAllItem.visible = false;   
			}  
			//给tab页添加菜单   
			private function addTabMenu():void{   
				//设置首页不可关闭   
				nav.setClosePolicyForTab(0,SuperTab.CLOSE_NEVER);   
				for(var i:uint=0;i<nav.getChildren().length;i++){   
					var tabBtn:mx.controls.Button=nav.getTabAt(i);   
					//添加双击tab页事件监听   
					//tabBtn.addEventListener(MouseEvent.DOUBLE_CLICK,maxsizeHandler);   
					tabBtn.contextMenu=tabMenu;                    
				}   
			}   
			
			protected function tab_closeHandler(event:MouseEvent):void
			{
				var idx:int = nav.selectedIndex;   
				if(idx >= 0)   
					nav.removeChildAt(idx);   
				
			}
			
		]]>
	</fx:Script>
	
	<!--************* 顶部横幅  ***************-->
	<s:BorderContainer width="100%" height="65"  styleName="TopBannerStyle" >
		<s:layout>
			<s:HorizontalLayout  verticalAlign="top" horizontalAlign="right"/>
		</s:layout>
		<s:HGroup height="100%" verticalAlign="bottom" >
			<mx:Image source="@Embed(source='../WebContent/resources/oa/layout/TopBanerLogo.png')" />
		</s:HGroup>
		<s:VGroup width="20%" height="100%" verticalAlign="middle">
			<s:BorderContainer width="203"  height="50" id="HeadIconContainer"  >
				<s:HGroup  width="100%"  height="100%" verticalAlign="middle"  paddingLeft="30" gap="30" >
					<mx:Image  source="@Embed(source='../WebContent/resources/oa/buttonIcon/home_icon.png')"   toolTip="首页"  mouseOver="image_mouseOverHandler(event)" mouseOut="image_mouseOutHandler(event)" click="homeTab();"/>
					<mx:Image  source="@Embed(source='../WebContent/resources/oa/buttonIcon/help_icon.png')"   toolTip="帮助"  mouseOver="image_mouseOverHandler(event)" mouseOut="image_mouseOutHandler(event)" click="Alert.show('帮助文档建设中');"/>
					<mx:Image  source="@Embed(source='../WebContent/resources/oa/buttonIcon/exit_icon.png')"   toolTip="退出"  mouseOver="image_mouseOverHandler(event)" mouseOut="image_mouseOutHandler(event)" click="exitSystem();"/>
				</s:HGroup>
				
			</s:BorderContainer>
		</s:VGroup>
		
		<s:VGroup width="25%" height="100%" paddingLeft="30" verticalAlign="middle">
			<s:HGroup width="35%">
				<s:Label id="account" text="当前用户："/>
				<s:Label id="mainRole" text="主职务："/>
				<s:Label id="mainDepartment" text="主部门："/>
			</s:HGroup>
			<s:Label id="roles" text="所有职务："/>
			<!--<s:HGroup width="35%">
			<s:Label id="lastLoginTime" text="上次登录："/>
			<s:Label text="当前时间："/>
			<s:Label id="currentTime" text=""/>
			</s:HGroup>-->
			
		</s:VGroup>
		<s:VGroup  height="100%" verticalAlign="middle" width="20" paddingRight="10">
			<mx:Image source="@Embed(source='../WebContent/resources/oa/buttonIcon/full_screen.png')"  toolTip="全屏|退出全屏控制" alpha="0.6" id="full_screen" mouseOver="full_screen.alpha=1;"   mouseOut="full_screen.alpha=0.6;" click="if(stage.displayState != StageDisplayState.FULL_SCREEN)stage.displayState = StageDisplayState.FULL_SCREEN;else stage.displayState = StageDisplayState.NORMAL;"></mx:Image>
		</s:VGroup>
		
	</s:BorderContainer>
	
	<s:BorderContainer height="5" width="100%"   borderVisible="false"></s:BorderContainer>
	
	<!--************    顶栏以下整大块区域   ***************-->
	<s:BorderContainer width="100%" height="100%"   borderVisible="false">
		<s:layout>
			<s:HorizontalLayout verticalAlign="middle" gap="0"/>
		</s:layout>
		
		<!--*******  左侧菜单栏 *********-->
		<mx:Accordion   headerStyleName="customAccordionHeadStyles" width="160"  top="15" height="100%"  selectedIndex="-1" id="menus"  headerHeight="30" fontSize="15" textAlign="center">
			
		</mx:Accordion>
		
		<!--************  右侧标签TabNavigator 面板 ****************-->
		<flexlib:DockableToolBar x="150" y="65" toolTip="隐藏|展开左区域菜单" height="100%" paddingTop="200" dropShadowVisible="false" borderVisible="false"  doubleClickEnabled="true" doubleClick="showHideLeftbody_handler(event)" ></flexlib:DockableToolBar>
		<flexlib:SuperTabNavigator id="nav" tabStyleName="tabStyle"
								   leftButtonStyleName="leftButton" 
								   rightButtonStyleName="rightButton"  
								   styleName="customTabNavStyle"   horizontalGap="1" paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0" closePolicy="SuperTab.CLOSE_ROLLOVER|SuperTab.CLOSE_ALWAYS|SuperTab.CLOSE_SELECTED|SuperTab.CLOSE_NEVER" width="100%" height="100%" allowTabSqueezing="false"  dragEnabled="false"    change="nav_changeHandler(event)" >
		</flexlib:SuperTabNavigator>
	</s:BorderContainer>
	
	<s:BorderContainer width="100%" height="30"  borderVisible="false">
		<s:layout>
			<s:HorizontalLayout verticalAlign="middle" horizontalAlign="center"/>
		</s:layout>
		<s:Label text="浙江省温岭中学办公自动化系统  CopyRight：2011-2012     "/>
		<s:Label text="杭州池墨科技有限公司"/>
	</s:BorderContainer>
</mx:Module>
