<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:local="*" xmlns:mx="http://www.adobe.com/2006/mxml"
		   xmlns:flexcalendar="com.flexcalendar.components.calendar.*"
		   xmlns:myflexcalendar="oa.schedule.flexCalendar"
		   xmlns:component="system.component.*"
		   xmlns:valueObjects="oa.entity.*"
		   height="100%" width="100%" creationComplete="init();" xmlns:flexCalendar="oa.schedule.flexCalendar.*"
		  >
	<mx:RemoteObject id="scheduleServiceRO" destination="scheduleServiceDest" showBusyCursor="true" fault="systemFaultHandler(event);">
		<mx:method name="getSchedulesByConditions"  concurrency="last"  result="getSchedulesByConditions_resultHandler(event);" />
		<mx:method name="addSchedule"  concurrency="last"  result="addSchedule_resultHandler(event);" />
		<mx:method name="updateSchedule"  concurrency="last"  result="updateSchedule_resultHandler(event);" />
		<mx:method name="deleteSchedule"  concurrency="last"  result="deleteSchedule_resultHandler(event);" />
		<mx:method name="finishSchedule"  concurrency="last"  result="finishSchedule_resultHandler(event);" />
		<mx:method name="getSchedule"  concurrency="last"  result="getSchedule_resultHandler(event);" />
	</mx:RemoteObject>
	<valueObjects:ScheduleModel id="model"/>
	<mx:Script>
		<![CDATA[
			import com.flexcalendar.components.calendar.core.DateRange;
			import com.flexcalendar.components.calendar.core.dataModel.CalendarDataProvider;
			import com.flexcalendar.components.calendar.core.dataModel.formatICalendar.Recur;
			import com.flexcalendar.components.calendar.editor.baloon.BaloonItemEditor;
			import com.flexcalendar.components.calendar.events.CalendarItemAddedEvent;
			import com.flexcalendar.components.calendar.events.CalendarItemModificationEvent;
			import com.flexcalendar.components.calendar.events.CalendarItemRemovedEvent;
			import com.flexcalendar.components.calendar.events.CalendarMouseEvent;
			import com.flexcalendar.components.calendar.events.RangeSelectEvent;
			import com.flexcalendar.components.calendar.utils.CalendarMode;
			import com.flexcalendar.components.calendar.utils.DateUtils;
			
			import flash.display.*;
			import flash.geom.*;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.CloseEvent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.*;
			import mx.resources.*;
			import mx.rpc.events.*;
			
			import oa.schedule.flexCalendar.*;
			
			import system.component.WlzxLockWin;
			import system.entity.*;
			import system.utils.CommonUtils;
			[Bindable]
			public var dp:CalendarDataProvider;
			
			[Bindable]
			public var visibleDateRange:DateRange;
			
			public var scheduleType:ArrayCollection = new ArrayCollection(
				[ {label:"全部", data:null},  
					{label:"私人日程", data:0},
					{label:"工作日程", data:1}]
			); 
			public var scheduleState:ArrayCollection = new ArrayCollection( 
				[ {label:"全部", data:null},  
					{label:"进行中", data:0},
					{label:"已完结", data:1}]); 
			
			protected function getSchedulesByConditions_resultHandler(event:ResultEvent):void
			{
				var allList:ArrayCollection=event.result as ArrayCollection;
				if(scheduleView.selectedValue=="list"){
					table.initdata(allList);
				}else if(scheduleView.selectedValue=="schedule"){
					dp = new DataProviderBuilder().buildDataProvider(allList);
				}
				unLockWin();
			}
			protected function getSchedule_resultHandler(event:ResultEvent):void
			{
				model=event.result as ScheduleModel;
				editPopWin();
//				Alert.show(model.title);
			}
			protected function addSchedule_resultHandler(event:ResultEvent):void
			{
				search();
			}
			protected function updateSchedule_resultHandler(event:ResultEvent):void
			{
				search();
			}
			protected function deleteSchedule_resultHandler(event:ResultEvent):void
			{
				search();
			}
			protected function finishSchedule_resultHandler(event:ResultEvent):void
			{
				search();
			}
			
			protected function init(event:Event = null):void {
				
				
				var today:Date = DateUtils.startOfDay(new Date());
				
				var startRange:Date = DateUtils.startOfDay(new Date());
				var endRange:Date = DateUtils.endOfDay(new Date());
				
				
				DateUtils.addDays(startRange, 0 - today.day);
				DateUtils.addDays(endRange, 0 - today.day + 6);
				
				visibleDateRange = new DateRange(startRange, endRange);
				fromDateChooser.text=CommonUtils.formatDate(startRange,"YYYY-MM-DD");
				toDateChooser.text=CommonUtils.formatDate(endRange,"YYYY-MM-DD");

				fromDateChooser.addEventListener(CalendarLayoutChangeEvent.CHANGE, updateRange);
				toDateChooser.addEventListener(CalendarLayoutChangeEvent.CHANGE, updateRange);
				fromDateChooser.addEventListener(FlexEvent.DATA_CHANGE, search);
				toDateChooser.addEventListener(FlexEvent.DATA_CHANGE, search);
				
				//create sample CalendarDataProvider
				//dp = new DataProviderBuilder().buildExampleDataProvider();
				if (flexCalendar.itemEditor != null)
				{
					flexCalendar.removeEventListener(CalendarMouseEvent.CALENDAR_MOUSE_CLICK, flexCalendar.itemEditor.calendarClickHandler);
					flexCalendar.removeEventListener(CalendarMouseEvent.CALENDAR_MOUSE_DOUBLE_CLICK, flexCalendar.itemEditor.calendarDoubleClickHandler);
					flexCalendar.removeEventListener(CalendarMouseEvent.CALENDAR_RENDERER_MOUSE_CLICK, flexCalendar.itemEditor.rendererClickHandler);
					flexCalendar.removeEventListener(CalendarMouseEvent.CALENDAR_RENDERER_MOUSE_DOUBLE_CLICK, flexCalendar.itemEditor.rendererDoubleClickHandler);
					flexCalendar.removeEventListener(CalendarMouseEvent.CALENDAR_SPACE_RENDERER_MOUSE_CLICK, flexCalendar.itemEditor.spaceRendererClickHandler);
					flexCalendar.removeEventListener(CalendarMouseEvent.CALENDAR_SPACE_RENDERER_MOUSE_DOUBLE_CLICK, flexCalendar.itemEditor.spaceRendererDoubleClickHandler);
					
					flexCalendar.addEventListener(CalendarMouseEvent.CALENDAR_MOUSE_CLICK,function(event:CalendarMouseEvent):void{
						//Alert.show(event.type);
//						Alert.show(event.selectedDate+"");
						add(event.selectedDate,new Date(event.selectedDate.time + event.preferredTimeInMills));
					});
					flexCalendar.addEventListener(CalendarMouseEvent.CALENDAR_RENDERER_MOUSE_CLICK,function(event:CalendarMouseEvent):void{enterEdit(event.item.itemId)});
					flexCalendar.addEventListener(CalendarMouseEvent.CALENDAR_SPACE_RENDERER_MOUSE_CLICK,function(event:CalendarMouseEvent):void{
						add(event.selectedDate,new Date(event.selectedDate.time + event.preferredTimeInMills));
					});
//					flexCalendar.addEventListener(CalendarItemModificationEvent.MODIFICATION_TYPE_ITEM_MOVED,function():void{
//						Alert.show("a");
//					});
//					flexCalendar.addEventListener(CalendarItemModificationEvent.MODIFICATION_TYPE_ITEM_RESIZED,function():void{
//						Alert.show("b");
//					});
						
					//flexCalendar.addEventListener(CalendarMouseEvent.CALENDAR_MOUSE_CLICK,);
				
				}
				
				callLater(hideWaterMark);
				search();
				list.percentHeight=100;
				list.visible=true;
				schedule.height=0;
				schedule.visible=false;
			}
			protected function systemFaultHandler(event:FaultEvent):void {
				Alert.show(event.fault.faultString, 'Error');
				unLockWin();
			}
			
			//隐藏水印代码
			private function hideWaterMark():void{
				var sy:Sprite=flexCalendar.getChildAt(3) as Sprite;
				sy.visible=false;
				sy.alpha=0;
			}
			protected function updateRange(event:CalendarLayoutChangeEvent):void {
				
				//sanity check
				if (toDateChooser.selectedDate < fromDateChooser.selectedDate) {
					//reset val	ues
					//Alert.show("c");
					fromDateChooser.selectedDate = flexCalendar.visibleRange.start;
					toDateChooser.selectedDate = flexCalendar.visibleRange.end;
					
				}
				else {
					//Alert.show("d");
					flexCalendar.visibleRange = new DateRange(DateUtils.startOfDay(fromDateChooser.selectedDate),
						DateUtils.endOfDay(toDateChooser.selectedDate));
				}
				fromDateChooser.dispatchEvent(new FlexEvent(FlexEvent.DATA_CHANGE));
				toDateChooser.dispatchEvent(new FlexEvent(FlexEvent.DATA_CHANGE));
				//Alert.show("e");
//				fromDateChooser.addEventListener(FlexEvent.DATA_CHANGE, search);
//				toDateChooser.addEventListener(FlexEvent.DATA_CHANGE, search);
//				callLater(function():void{
//					Alert.show("bb");
//					search();
//				});
			}
			
//			private function calendarMouseClickHandler(event:CalendarMouseEvent):void {
//				trace("Selected date: " + event.selectedDate);
//				trace("Preferred new event time: " + event.preferredTimeInMills);
//				trace("Mouse event: " + event.event);
//			}
//			
//			
//			private function calendarRendererMouseClickHandler(event:CalendarMouseEvent):void {
//				trace("Selected renderer start date: " + event.selectedDate);
//				trace("Selected item details: " + event.item)
//				trace("Selected item summary: " + event.item.summary);
//				trace("Mouse event: " + event.event);
//			}
			
			private function calendarItemAdded(event:CalendarItemAddedEvent):void {
//				Alert.show("add");
				trace("Item added");
				
			}
			
			private function calendarItemRemoved(event:CalendarItemRemovedEvent):void {
//				Alert.show("removed");
				trace("Item removed");
				
			}
			
			private function calendarItemModified(event:CalendarItemModificationEvent):void {
				//Alert.show(event.modificationType);
				if(event.modificationType==CalendarItemModificationEvent.MODIFICATION_TYPE_ITEM_MOVED||event.modificationType==CalendarItemModificationEvent.MODIFICATION_TYPE_ITEM_RESIZED){
					
					scheduleServiceRO.updateScheduleTime(event.item.itemId,CommonUtils.formatDate(event.item.start),CommonUtils.formatDate(event.item.end));
				}
				trace("Item modified");
				
			}

			private function scheduleViewSwitch(event:ItemClickEvent):void {
				var value:String=event.currentTarget.selectedValue;
//								Alert.show(value);
				//				scheduleViewContainer.setCurrentState(value,true);
				if(value=="list"){
//					scheduleViewContainer.selectedChild= a;
					list.percentHeight=100;
					list.visible=true;
					schedule.height=0;
					schedule.visible=false;
					search();
				}else if(value=="schedule"){
					schedule.percentHeight=100;
					schedule.visible=true;
					list.height=0;
					list.visible=false;
//					flexCalendar.addEventListener(RangeSelectEvent.RANGE_NEXT, search);
//					flexCalendar.addEventListener(RangeSelectEvent.RANGE_PREV, search);
//					flexCalendar.addEventListener(RangeSelectEvent.RANGE_SELECT_DAY , search);
//					flexCalendar.addEventListener(RangeSelectEvent.RANGE_SELECT_MONTH, search);
//					flexCalendar.addEventListener(RangeSelectEvent.RANGE_SELECT_TODAY, search);
//					flexCalendar.addEventListener(RangeSelectEvent.RANGE_SELECT_WEEK, search);
//					flexCalendar.addEventListener(RangeSelectEvent.RANGE_SELECT_WORKING_WEEK, search);
					search();
//						scheduleViewContainer.selectedChild= b;
//						
//						callLater(hideWaterMark);
				}
				
			}
			public  function enterEdit(id:String):void{
//				Alert.show(id);
				scheduleServiceRO.getSchedule(id);
			
				
			}

			public function editPopWin():void{
//					Alert.show("aaa");
//					Alert.show(model.beginTime);
					if(pop!=null)PopUpManager.removePopUp(pop);
					pop=MyBaloonEditorPanel(PopUpManager.createPopUp(this,MyBaloonEditorPanel,true)); 
					pop.owner=this;
					
					pop.toolTip="Update";
					
					var calendarItem:CalendarItem=new CalendarItem(DateFormatter.parseDateString(model.beginTime),DateFormatter.parseDateString(model.endTime),model.title);
					
					var recurString:String = new String();
					recurString += MyItemEditorVOConverter.getFreqType(model.repeatType);
					recurString += MyItemEditorVOConverter.getByDay2(model.repeatType,model.repeatOnDays);
//					Alert.show(MyItemEditorVOConverter.getByDay2(model.repeatType,model.repeatOnDays));
					recurString += MyItemEditorVOConverter.getInterval(model.repeatInterval);
		
					calendarItem.recur = new Recur(recurString);
					pop.item = converter.calendarItemToItemEditorVO(calendarItem);
					pop.item.departmentShare=CommonUtils.int2Boolean(model.departmentShare);
					pop.item.schoolShare=CommonUtils.int2Boolean(model.schoolShare);
					pop.item.emergence=model.emergence;
					pop.item.interval=model.repeatInterval;
					pop.item.recurring=CommonUtils.int2Boolean(model.repeatStatus);
					pop.item.repeatRuleId=model.repeatType;
					pop.item.type=model.type;
					pop.item.endDateSpecified=(model.repeatEndTime!=null?true:false);
					pop.item.endDate=DateFormatter.parseDateString(model.repeatEndTime);
//					pop.item.MO=!model.repeatOnDays.split(";")[0] as Boolean;
////					Alert.show(pop.item.MO+"");
//					pop.item.TU=Boolean(model.repeatOnDays.split(";")[1]);
//					pop.item.WE=Boolean(model.repeatOnDays.split(";")[2]);
//					pop.item.TH=Boolean(model.repeatOnDays.split(";")[3]);
//					pop.item.FR=Boolean(model.repeatOnDays.split(";")[4]);
//					pop.item.SA=Boolean(model.repeatOnDays.split(";")[5]);
//					pop.item.SU=Boolean(model.repeatOnDays.split(";")[6]);
//					Alert.show(pop.item.SU+"");
					pop.cancelCallback=function():void{
						PopUpManager.removePopUp(this);
					};
					pop.saveCallback = function():void{
//						model=new ScheduleModel();
						model.beginTime=CommonUtils.formatDate(pop.item.start);
						model.endTime=CommonUtils.formatDate(pop.item.end);
						model.title=pop.item.summary;
						model.content=pop.item.description;
						model.type=pop.item.type;
						model.departmentShare=int(pop.item.departmentShare);
						model.schoolShare=int(pop.item.schoolShare);
						model.emergence=pop.item.emergence;
//						model.finishStatus=0;
						model.posterId=this.parentApplication.currentUser.id;
						//					Alert.show(pop.item.endDate+"");
						//					Alert.show(pop.item.endDateSpecified+"");
						if(pop.item.endDateSpecified)
							model.repeatEndTime=CommonUtils.formatDate(pop.item.endDate);
						else model.repeatEndTime=null;
						model.repeatStatus=int(pop.item.recurring);
						model.repeatInterval=pop.item.interval;
						model.repeatOnDays=int(pop.item.MO)+";"+int(pop.item.TU)+";"+int(pop.item.WE)+";"+int(pop.item.TH)+";"+int(pop.item.FR)+";"+int(pop.item.SA)+";"+int(pop.item.SU);
						model.repeatType=pop.item.repeatRuleId;
//						model.submitStatus=0;
						scheduleServiceRO.updateSchedule(model);
						PopUpManager.removePopUp(pop);
					};
					pop.deleteCallback = function():void{
						
						Alert.show("你确定要删除该日程吗?","确认删除",Alert.YES|Alert.NO,null,function(event:CloseEvent):void{
							if(event.detail == Alert.YES){
								var id:String=model.id;
								scheduleServiceRO.deleteSchedule(id);
								PopUpManager.removePopUp(pop);
							}
							
						},null,Alert.NO);
					};
					PopUpManager.centerPopUp(pop);
					pop.percentHeight=100;
					pop.percentWidth=100;
					pop.x=FlexGlobals.topLevelApplication.stage.stageWidth/2-pop.width/2;
					pop.y=FlexGlobals.topLevelApplication.stage.stageHeight/2-pop.height/2;
				
			}
			public function finish(id:String):void{
				scheduleServiceRO.finishSchedule(id);
			}
			public function remove(id:String):void{
				Alert.show("你确定要删除该日程吗?","确认删除",Alert.YES|Alert.NO,null,function(event:CloseEvent):void{
					if(event.detail == Alert.YES)
						scheduleServiceRO.deleteSchedule(id);
				},null,Alert.NO);
			}
			import mx.core.FlexGlobals;
			import mx.managers.PopUpManager;
			import com.flexcalendar.components.calendar.core.dataModel.*;
			public var pop:MyBaloonEditorPanel=null;
			private var converter:MyItemEditorVOConverter = new MyItemEditorVOConverter();
			public function add(beginDate:Date=null,endDate:Date=null):void{
				if(beginDate==null)beginDate=new Date();
				if(endDate==null)endDate=new Date();
				if(pop!=null)PopUpManager.removePopUp(pop);
				pop=MyBaloonEditorPanel(PopUpManager.createPopUp(this,MyBaloonEditorPanel,true)); 
				pop.owner=this;
				PopUpManager.centerPopUp(pop);
				pop.percentHeight=100;
				pop.percentWidth=100;
				pop.x=FlexGlobals.topLevelApplication.stage.stageWidth/2-pop.width/2;
				pop.y=FlexGlobals.topLevelApplication.stage.stageHeight/2-pop.height/2;
				pop.toolTip="Add";
				var calendarItem:CalendarItem;calendarItem 
						=new CalendarItem(beginDate,endDate,
							ResourceManager.getInstance().getString("FlexCalendar", "editor.newItem"));
				pop.item = converter.calendarItemToItemEditorVO(calendarItem);
				pop.cancelCallback=function():void{
					PopUpManager.removePopUp(pop);
				};
				pop.saveCallback = function():void{
					model=new ScheduleModel();
					model.beginTime=CommonUtils.formatDate(pop.item.start);
					model.endTime=CommonUtils.formatDate(pop.item.end);
					model.title=pop.item.summary;
					model.content=pop.item.description;
					model.type=pop.item.type;
					model.departmentShare=int(pop.item.departmentShare);
					model.schoolShare=int(pop.item.schoolShare);
					model.emergence=pop.item.emergence;
					model.finishStatus=0;
					model.posterId=this.parentApplication.currentUser.id;
//					Alert.show(pop.item.endDate+"");
//					Alert.show(pop.item.endDateSpecified+"");
					if(pop.item.endDateSpecified)
					model.repeatEndTime=CommonUtils.formatDate(pop.item.endDate);
					model.repeatStatus=int(pop.item.recurring);
					model.repeatInterval=pop.item.interval;
					model.repeatOnDays=int(pop.item.MO)+";"+int(pop.item.TU)+";"+int(pop.item.WE)+";"+int(pop.item.TH)+";"+int(pop.item.FR)+";"+int(pop.item.SA)+";"+int(pop.item.SU);
					model.repeatType=pop.item.repeatRuleId;
					model.submitStatus=0;
					scheduleServiceRO.addSchedule(model);
					PopUpManager.removePopUp(pop);
				};
				pop.deleteCallback = function():void{
					PopUpManager.removePopUp(pop);
				};
				
				
			}
			public var  maxFlag:Boolean=false;
			private function maxCalendar():void{
				if(maxFlag==false){
					toolBar.height=0;
					conditionBar.height=0;
					flexCalendar.refresh();
					maxFlag=true;
				}else{
					toolBar.height=30;
					conditionBar.height=30;
					flexCalendar.refresh();
					maxFlag=false;
				}
			}
			private function search():void{
				//Alert.show("aa");
				lockWin();
				var scheduleBeginDate:String=fromDateChooser.text;
				var scheduleEndDate:String=toDateChooser.text;
				var scheduleType:String=type.selectedItem.data;
				var scheduleState:String=state.selectedItem.data;
				scheduleServiceRO.getSchedulesByConditions(this.parentApplication.currentUser.id,scheduleType,scheduleState,null,null,null,null,null,scheduleBeginDate,scheduleEndDate);
			}
			private var window:WlzxLockWin=null;
			private function lockWin():void{
				if(window==null){
					window=WlzxLockWin(PopUpManager.createPopUp(this,WlzxLockWin,true)); 
					PopUpManager.centerPopUp(window);
					window.percentHeight=100;
					window.percentWidth=100;
				}		
				
			}
			private function unLockWin():void{
				if(window!=null)
					PopUpManager.removePopUp(window);
			}
			import mx.printing.*;
			protected function print_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var job : FlexPrintJob = new FlexPrintJob();
				job.printAsBitmap = false;
				if(job.start()) {
					job.addObject(list, FlexPrintJobScaleType.NONE);
					job.send();
				}
			}
		]]>
	</mx:Script>
	
<!--	<mx:Metadata>
		[ResourceBundle("sampleApp")]
	</mx:Metadata>-->
		
	<mx:VBox borderVisible="true" width="100%" height="100%" borderStyle="solid">
	
		<mx:VBox width="100%" height="100%" id="listPanel">
			<mx:HBox verticalAlign="middle" horizontalAlign="right" width="100%" fontSize="12"  >
				<mx:HBox width="100%" height="30" paddingLeft="20"  horizontalGap="0" backgroundColor="#C5E497"  verticalAlign="middle" id="toolBar">
					<mx:Label text="|"/>
					<mx:LinkButton  label="新建" icon="@Embed(source='../WebContent/resources/common/tools/button_add_icon.png')"  click="add()" />
					<mx:Label text="|"/>
					<mx:LinkButton  label="工作提交" icon="@Embed(source='../WebContent/resources/common/tools/button_add_icon.png')"/>
					<mx:Label text="|"/>
					<mx:LinkButton label="打印" click="print_clickHandler(event)" icon="@Embed(source='../WebContent/resources/common/tools/button_printer_icon.png')"/>
					<mx:Label text="|"/>
					<mx:LinkButton  label="导出" icon="@Embed(source='../WebContent/resources/common/tools/button_printer_icon.png')"/>
					<mx:Label text="|"/>
				</mx:HBox>
			</mx:HBox>
			<mx:VBox width="100%" height="100%"  paddingLeft="10" paddingRight="10">
				<mx:HBox height="30" width="100%" verticalAlign="middle" horizontalAlign="left" id="conditionBar">
					<mx:Label text="起止日期：" width="70">
						
					</mx:Label>
					<mx:DateField yearNavigationEnabled="true" width="100" editable="false" id="fromDateChooser" selectedDate="{flexCalendar.visibleRange.start}"  formatString="YYYY-MM-DD"  >
						
					</mx:DateField>
					<mx:Label text="--" width="20">
						
					</mx:Label>
					<mx:DateField yearNavigationEnabled="true" width="100" editable="false" id="toDateChooser" selectedDate="{flexCalendar.visibleRange.end}" formatString="YYYY-MM-DD" >
						
					</mx:DateField>
					<mx:Label text="日程类型：" width="70" >
						
					</mx:Label>
					<mx:ComboBox id="type" width="130" dataProvider="{scheduleType}" selectedIndex="0">
						
					</mx:ComboBox>
					<mx:Label text="日程状态：" width="70">
						
					</mx:Label>
					<mx:ComboBox width="100"   id="state" dataProvider="{scheduleState}"  selectedIndex="0">
						
					</mx:ComboBox>
					<mx:Button id="searchButton" label="查询"   width="80"  click="search()"/>									

					<mx:RadioButtonGroup id="scheduleView"  itemClick="scheduleViewSwitch(event);" />
					<mx:RadioButton label="列表视图"  groupName="scheduleView" id="listView" selected="true" value="list"/>
					<mx:RadioButton label="日历视图" groupName="scheduleView" id="dateView" value="schedule"/>
					
				</mx:HBox>
				
					<mx:VBox width="100%" height="100%" label="个人日程列表"  name="list" id="list">
						
						<component:WlzxPageDataGrid width="100%" height="100%" borderVisible="false"   borderAlpha="0.2" verticalAlign="middle" id="table">				
							<component:mygridcolumns>
								
								<mx:DataGridColumn textAlign="center" headerText="标记" dataField="loginaccount" width="50">
									<mx:itemRenderer>
										<mx:Component>
											<mx:HBox width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
												<mx:Image source="@Embed(source='../WebContent/resources/common/ui/circle.png')"  visible="{checkCircle(data)}"/>
												<mx:Script>
													<![CDATA[
														
														//提示信息
														import cn.org.rapid_framework.flex_security.SecurityControler;
														
														import mx.controls.Alert;
														import mx.core.UIComponent;
														private function checkCircle(data:Object):Boolean{
															
															if(data!=null){	
																if(data.repeatStatus==1){
																	return true;
																}else
																	return false;
																
															}else{
																return false;
															}
														}
													]]>
												</mx:Script>
												
											</mx:HBox>																			
										</mx:Component>						
									</mx:itemRenderer>
								</mx:DataGridColumn>
								<mx:DataGridColumn textAlign="center" headerText="日程类型"  width="60">
									<mx:itemRenderer>
										<mx:Component>
											<mx:VBox width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
												<mx:Label text="{getType(data.type)}"/>
												<mx:Script>
													<![CDATA[
														
														//提示信息
														import cn.org.rapid_framework.flex_security.SecurityControler;
														
														import mx.controls.Alert;
														import mx.core.UIComponent;
														private function getType(type:int):String{
															
															if(type==0){
																return "私人日程";
															}else
																return "工作日程";
															
															
														}
													]]>
												</mx:Script>
											</mx:VBox>																			
										</mx:Component>	
										
									</mx:itemRenderer>
								</mx:DataGridColumn>
								<mx:DataGridColumn textAlign="center" headerText="共享日程" width="100">
									<mx:itemRenderer>
										<mx:Component>
											<mx:VBox width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
												<mx:Label text="{getShares(data)}"/>
												<mx:Script>
													<![CDATA[
														
														//提示信息
														import cn.org.rapid_framework.flex_security.SecurityControler;
														
														import mx.controls.Alert;
														import mx.core.UIComponent;
														private function getShares(data:Object):String{
															
															if(data!=null){
																var result:String="";
																
																	if(data.schoolShare=="1")
																		result+="学校共享"+"  ";
																	if(data.departmentShare=="1")
																		result+="部门共享"+"  ";
																	if(result=="")return "不共享";
																return result;
															}else{
																return null;
															}
														}
													]]>
												</mx:Script>
											</mx:VBox>																			
										</mx:Component>
										
									</mx:itemRenderer>
								</mx:DataGridColumn>
								<mx:DataGridColumn textAlign="center" headerText="开始时间" width="100">
									<mx:itemRenderer>
										<mx:Component>
											<mx:VBox width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
												<mx:Label text="{data.beginTime}"/>
												
											</mx:VBox>																			
										</mx:Component>						
									</mx:itemRenderer>
								</mx:DataGridColumn>
								<mx:DataGridColumn textAlign="center" headerText="截止时间"  width="100">
									<mx:itemRenderer>
										<mx:Component>
											<mx:VBox width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
												<mx:Label text="{data.endTime}"/>
											</mx:VBox>																			
										</mx:Component>						
									</mx:itemRenderer>
								</mx:DataGridColumn>
								<mx:DataGridColumn textAlign="center" headerText="主题" width="200">
									<mx:itemRenderer>
										<mx:Component>
											<mx:HBox width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
												
												<mx:Label text="{data.title}" width="80%"/>
												
											</mx:HBox>																			
										</mx:Component>						
									</mx:itemRenderer>
								</mx:DataGridColumn>
								
								<mx:DataGridColumn textAlign="center" headerText="优先级" width="60">
									<mx:itemRenderer>
										<mx:Component>
											<mx:VBox width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
												<mx:Label text="{getEmergence(data.emergence)}"/>
												<mx:Script>
													<![CDATA[
														
														//提示信息
														import cn.org.rapid_framework.flex_security.SecurityControler;
														
														import mx.controls.Alert;
														import mx.core.UIComponent;
														private function getEmergence(emergence:int):String{
															
															if(emergence==0){
																return "重要紧急";
															}else if(emergence==1){
																return "重要非紧急";
															}else if(emergence==2){
																return "紧急非重要";
															}else return null;
															
														}
													]]>
												</mx:Script>
											</mx:VBox>																			
										</mx:Component>	
										
									</mx:itemRenderer>
								</mx:DataGridColumn>
								<mx:DataGridColumn textAlign="center" headerText="操作" width="150">
									<mx:itemRenderer>
										<mx:Component>
											<mx:HBox width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" horizontalGap="0">
												<mx:LinkButton  label="[编辑]"   click="{this.outerDocument.enterEdit(data.id);}" enabled="{checkAuth(data)}">											
												</mx:LinkButton>
												<mx:LinkButton  label="[完成]"   click="{this.outerDocument.finish(data.id);}" enabled="{checkAuth(data)}">											
												</mx:LinkButton>
												<mx:LinkButton  label="[删除]"   click="{this.outerDocument.remove(data.id);}" >											
												</mx:LinkButton>
												<mx:Script>
													<![CDATA[
														
														//提示信息
														import cn.org.rapid_framework.flex_security.SecurityControler;
														
														import mx.controls.Alert;
														import mx.core.UIComponent;
														private function checkAuth(data:Object):Boolean{
															
															if(data!=null){	
																if(data.finishStatus==0){
																	return true;
																}else
																	return false;
																
															}else{
																return false;
															}
														}
													]]>
												</mx:Script>
											</mx:HBox>
											
											
										</mx:Component>
										
									</mx:itemRenderer>
								</mx:DataGridColumn>
							</component:mygridcolumns>
						</component:WlzxPageDataGrid>
					</mx:VBox>
					
					
					
					<mx:VBox label="日历视图" width="100%" height="0" name="schedule" id="schedule" horizontalAlign="right">
						<flexCalendar:MyFlexCalendar license="xxxx-xxx-xxx-xx-xxx" id="flexCalendar" width="100%" height="100%" dataProvider="{dp}" scaleX="1" visibleRange="{visibleDateRange}"
													scaleY="1"
													calendarMode="{CalendarMode.FREE_EDIT_MODE}"
													firstDayOfWeek="1"
													initialHourPosition="9"
													itemEditor="{new MyBaloonItemEditor(flexCalendar, false, false)}"
													headerVisible="true"
													currentTimeIndicator="true"
													currentDayIndicator="true"
													doubleClickEnabled="false"
													calendarItemAddedEvent="calendarItemAdded(event)"
													calendarItemRemovedEvent="calendarItemRemoved(event)"
													calendarItemModificationEvent="calendarItemModified(event)"
													calendarRendererMouseClick="enterEdit(event.item.itemId);"
													calendarSpaceRendererMouseClick="add()"
													calendarMouseClick ="add()"
													  
													/>
					</mx:VBox>	
			</mx:VBox>
		</mx:VBox>
	
	</mx:VBox>			
			
		
		
		
	
	
</mx:Module>
