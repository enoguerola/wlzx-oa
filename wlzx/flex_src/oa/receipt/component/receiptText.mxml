<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" initialize="init()"
		 xmlns:component="system.component.panel.*">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<mx:StringValidator id="title_string_validate" source="{title}" property="text"  requiredFieldError="不能为空" triggerEvent=""/>
		<mx:StringValidator id="summary_string_validate" source="{summary}" property="text"  requiredFieldError="不能为空" triggerEvent=""/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import basic.utils.DateUtil;
			
			import mx.collections.ArrayCollection;
			import mx.containers.HBox;
			import mx.controls.Alert;
			import mx.rpc.events.*;
			
			import oa.receipt.component.item.AttachmentDelete;
			import oa.receipt.component.item.CompleteHandler;
			
			import spark.components.Button;
			
			[Bindable]
			public var list:ArrayCollection;
			private var downloadURL:URLRequest;
			private var file:FileReference; //这是要主要的地方
			public var titleHBox:HBox;
			public var titleButton:Button;
			public var saveButton:Button;
			private var validatorArr:Array = new Array();
			
			private function init():void
			{
				/*titleHBox = new HBox();
				titleHBox.setStyle("fontSize", 12);
				titleHBox.setStyle("color", 0x333333);
				
				titleHBox.setStyle("verticalAlign", "middle");
				titleButton = new Button();
				titleButton.label="下一步";
				titleButton.addEventListener(MouseEvent.CLICK, next);
				titleHBox.addChild(titleButton);
				
				saveButton = new Button();
				saveButton.label="保存";
				saveButton.addEventListener(MouseEvent.CLICK, save, true);
				titleHBox.addChild(saveButton);
				
				text_panel.titleBox = titleHBox;*/
			}
			
			public function next():void
			{
				save();
			}
			
			public function save():void
			{
				Alert.show("ss");
				//var parent:Object = this.parentDocument;
				//parent.save(0);
			}
			
			public function download(id:String):void {
				downloadURL = new URLRequest(parentApplication.homeUrl+"/uploads/oa/attachment/" + id );
				//downloadURL = new URLRequest("http://localhost:8081/wlzx/uploads/oa/attachment/gravtar_junlu_110627085752.jpg");
				file = new FileReference();
				configureListeners(file);
				file.download(downloadURL);
				
			}
			
			private function configureListeners(dispatcher:IEventDispatcher):void {
				dispatcher.addEventListener(Event.CANCEL, cancelHandler);
				dispatcher.addEventListener(Event.COMPLETE, completeHandler);
				dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
				dispatcher.addEventListener(Event.OPEN, openHandler);
				dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
				dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
				dispatcher.addEventListener(Event.SELECT, selectHandler);
			}
			
			private function cancelHandler(event:Event):void {
				trace("cancelHandler: " + event);
			}
			
			private function completeHandler(event:Event):void {
				trace("completeHandler: " + event);
				Alert.show("下载成功");
			}
			
			private function ioErrorHandler(event:IOErrorEvent):void {
				trace("ioErrorHandler: " + event);
				Alert.show("网络连接有错");
			}
			
			private function openHandler(event:Event):void {
				trace("openHandler: " + event);
			}
			
			private function progressHandler(event:ProgressEvent):void {
				var file:FileReference = FileReference(event.target);
				trace("progressHandler name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
			}
			
			private function securityErrorHandler(event:SecurityErrorEvent):void {
				trace("securityErrorHandler: " + event);
			}
			
			private function selectHandler(event:Event):void {
				var file:FileReference = FileReference(event.target);
				trace("selectHandler: name=" + file.name + " URL=" + downloadURL.url);
			}
			
			private function changed():void
			{
				var parent:Object = this.parentDocument;
				parent.isChanged = true;
			}
		]]>
	</fx:Script>
	<component:AdvancedTitleBarPanel width="100%" height="100%" id="text_panel" paddingTop="10"  paddingBottom="10"  borderVisible="false">
		<s:VGroup width="100%" height="100%" id="text_group">
			<s:HGroup width="100%" height="10%">
				<mx:FormHeading label="来文标题" width="100"/>
				<s:TextInput id="title" width="200" change="changed()"/>
			</s:HGroup>
			<s:HGroup width="100%" height="100%">
				<mx:FormHeading label="来文摘要" width="100"/>
				<s:TextArea id="summary" width="80%" change="changed()" height="100%"/>
			</s:HGroup>
			<s:HGroup width="100%" paddingTop="10" height="200">
				<mx:FormHeading label="上传列表" width="100"/>
				<mx:DataGrid width="80%" height="100%" id="datagrid" dataProvider="{list}" textAlign="center">
					<mx:columns>
						<mx:DataGridColumn dataField="id" headerText="序号" width="50"/>
						<mx:DataGridColumn dataField="name" headerText="附件名称" width="300">
							<mx:itemRenderer>
								<fx:Component>
									<mx:Label text="{data.name}"  width="100%"/>
								</fx:Component>
							</mx:itemRenderer>
						</mx:DataGridColumn>
						<mx:DataGridColumn dataField="date" labelFunction="DateUtil.datagridFormatDate" headerText="上传时间" width="100"/>
						<mx:DataGridColumn dataField="name" headerText="下载" width="100">
							<mx:itemRenderer>
								<fx:Component>
									<mx:Label text="下载" click="{this.outerDocument.download(data.id)}" width="100%"/>
								</fx:Component>
							</mx:itemRenderer>
						</mx:DataGridColumn>
					</mx:columns>
				</mx:DataGrid>
			</s:HGroup>
		</s:VGroup>
	</component:AdvancedTitleBarPanel>
</s:Group>
