<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" width="100%"  height="100%"   creationComplete="init();">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<mx:HTTPService id="logoutRequest" url="j_spring_security_logout" showBusyCursor="true" method="POST" result="logout_success_handle(event);" fault="logout_fault_handler(event);" useProxy="false" resultFormat="text">  
		</mx:HTTPService> 
		<mx:RemoteObject id="securityUserHolder" destination="securityUserHolder"  fault="securityUserHolder_fault_handler(event);">
			<mx:method name="getCurrentUser"  concurrency="last"  result="getCurrentUserResult(event);" />
		</mx:RemoteObject>
		<mx:RemoteObject id="teacherAccountBridgeServiceRO" destination="teacherAccountBridgeServiceDest" showBusyCursor="true" fault="systemFaultHandler(event);">
			<mx:method name="teacherAccountGetAll"  concurrency="last"  result="teacherAccountGetAll_resultHandler(event);" />
		</mx:RemoteObject>
		<mx:RemoteObject id="systemServiceRO" destination="systemServiceDest" showBusyCursor="true" fault="systemFaultHandler(event);">
			<mx:method name="getDepartmentBySymbol"  concurrency="last"  result="getDepartmentBySymbolResult(event);" />
		</mx:RemoteObject>
	</fx:Declarations>
	<fx:Script>    
		<![CDATA[   
			import cn.org.rapid_framework.flex_security.SecurityControler;
			
			import flash.display.Stage;
			import flash.display.StageDisplayState;
			
			import mx.collections.ArrayCollection;
			import mx.controls.*;
			import mx.events.ModuleEvent;
			import mx.modules.*;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import system.entity.*;
			import system.event.BaseEvent;
			import system.implement.BaseImpl;
			import system.utils.*;
			import system.utils.CommonUtils;
			public var default_url:String="oa/index.swf";
			public var account:String;
			public var roles:String;
			public var mainRole:String;
			public var lastLoginTime:String;
			public var currentUser:UserModel;
			public var allTeacherAcccounts:ArrayCollection = new ArrayCollection();
			public var allDepartment:ArrayCollection = new ArrayCollection();
			
			private function init():void{
				securityUserHolder.getCurrentUser();
				teacherAccountBridgeServiceRO.teacherAccountGetAll();
				systemServiceRO.getDepartmentBySymbol("root");
			}
			protected function systemFaultHandler(event:FaultEvent):void {
				Alert.show(event.fault.faultString, 'Error');
				
			}
			private function readyModule( event:ModuleEvent ) : void
			{ 
				var ml:ModuleLoader = event.target as ModuleLoader;				
				var ichild:BaseImpl = ml.child as BaseImpl;
				ichild.addEventListener(BaseEvent.RETURN, returnHomeModule);
				ichild.addEventListener(BaseEvent.Enter, EnterNewModule);
				
			}
			public function returnHomeModule(event:BaseEvent):void
			{
				loadModule(default_url);
			}
			public function EnterNewModule(event:BaseEvent):void
			{
				loadModule(event.module);
			}
			
			/**
			 *  加载模块。
			 */
			public function loadModule(s:String):void {
				// setting the url triggers the module to load
				currentModule.url = s;
				currentModule.loadModule();
			}
			                 
			private function logout_success_handle(event:ResultEvent):void  
			{ 
				ExternalInterface.call("function() {window.location.href='login.html';}"); 
				//Alert.show(e.result.Result); 
			} 
			private function logout_fault_handler(event:FaultEvent):void
			{
				Alert.show("退出失败");
			}
			private function teacherAccountGetAll_resultHandler(event:ResultEvent):void{
				//				accounts.addItem({name:"",account:"",id:""});
				var allList:ArrayCollection=event.result as ArrayCollection;
				//Alert.show(allList.length+"");
//				for(var i:int=0;i<allList.length;i++){
//					var triple:TripleObject=allList.getItemAt(i) as TripleObject;
//					allTeacherAcccounts.addItem({name:triple.left,account:triple.middle,id:triple.right});
//				}
				//追加超级管理员
				allTeacherAcccounts.addItem({name:"超级管理员",account:"super_root",id:"1"});
			}
			public function getTeacherNameByAccountId(id:String):String{
				for(var i:int=0;i<allTeacherAcccounts.length;i++){
					var account:Object=allTeacherAcccounts.getItemAt(i);
					if(account.id==id){
						return account.name;
					}
				}
				return "";
			}
			public function getItemByAccountId(id:String):Object{
				for(var i:int=0;i<allTeacherAcccounts.length;i++){
					var item:Object=allTeacherAcccounts.getItemAt(i);
					if(item.id==id){
						return item;
					}
				}
				return null;
			}
			private function getCurrentUserResult(event:ResultEvent):void  
			{  
				currentUser=event.result as UserModel;
				account=currentUser.person.name;
				roles=currentUser.getAllRoles();
//				Alert.show(roles);
				mainRole=currentUser.mainRole.name;
				lastLoginTime=CommonUtils.formatDate(currentUser.lastLoginTime);
//				Alert.show(event.result.name);
				callLater(function():void{
					loadModule(default_url);
					//启动权限控制
					SecurityControler.start(null,'enabled');
				});
			} 
			private function securityUserHolder_fault_handler(event:FaultEvent):void
			{
				Alert.show("请求当前用户信息异常");
			}
			private function fullScreen():void{
				stage.displayState = StageDisplayState.FULL_SCREEN;	
			}
			
			private function getDepartmentBySymbolResult(event:ResultEvent):void {
				var _department:DepartmentModel = event.result as DepartmentModel;
				buildSubDepartments(_department,allDepartment,0);
			}
			
			private function buildSubDepartments(department:DepartmentModel,resultList:ArrayCollection,depth:int):void{
				var headText:String="";
				for(var j:int = 0;j<depth;j++)
					headText=headText.concat("--");
				headText=headText.concat(department.name);
				resultList.addItem( {data:department.id, label:headText})
				var list:ArrayCollection = ArrayCollection(department.subordinates);			
				if(list.length>0){
					for (var i:int = 0; i < list.length; i++){
						var _department:DepartmentModel = list.getItemAt(i) as DepartmentModel;	
						buildSubDepartments(_department,resultList,depth+1);
					}
				}		
			}
			public function getDepartmentNameById(id:String):String{
				for(var i:int=0;i<allDepartment.length;i++){
					var item:Object=allDepartment.getItemAt(i);
					if(item.data == id){
						var name:String = item.label;
						var index:int = name.lastIndexOf("-");
						return name.substring(index + 1);
					}
				}
				return allDepartment.getItemAt(0).name;
			}

		]]>    
	</fx:Script> 
	<fx:Style source="home.css"/>
	<mx:ModuleLoader id="currentModule" ready="readyModule(event);"  width="100%"  height="100%" /> 
</s:Application>
