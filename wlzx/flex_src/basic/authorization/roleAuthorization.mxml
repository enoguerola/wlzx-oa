<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx"  creationComplete="init();" width="100%" height="100%" xmlns:flexlib="http://code.google.com/p/flexlib/" >
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<!--定义 RemoteObject 组件-->
		<mx:RemoteObject id="systemServiceRO" destination="systemServiceDest" showBusyCursor="true" fault="systemFaultHandler(event);">
			<mx:method name="getSystemBySymbol"  concurrency="last"  result="getSystemBySymbolResult(event);" />
			<mx:method name="getAllRoles"  concurrency="last"  result="getAllRolesResult(event);" />
			<mx:method name="getRoleBySymbol"  concurrency="last"  result="getRoleBySymbolResult(event);" />
			<mx:method name="getRoleSystemAuthorization"  concurrency="last"  result="getRoleSystemAuthorizationResult(event);" />
			<mx:method name="saveRoleSystemAuthorization"  concurrency="last"  result="saveRoleSystemAuthorizationResult(event);" />

		</mx:RemoteObject>
		<mx:HTTPService id="reloadAuthHttp" url="reloadSpringSecurityAuthServlet" showBusyCursor="false" method="POST"  fault="systemFaultHandler(event);">  
			
		</mx:HTTPService>  
	</fx:Declarations>
	<fx:Style>
		.customTabStyles {
			skin: ClassReference("system.skins.WlzxSubTabSkin");
			border:1px;
		}
	</fx:Style>
	<fx:Script>
		<![CDATA[
			
			
			import cn.org.rapid_framework.flex_security.SecurityControler;
			
			import flexlib.controls.SuperTabBar;
			import flexlib.controls.tabBarClasses.SuperTab;
			import flexlib.events.TabReorderEvent;
			
			import mx.collections.*;
			import mx.collections.ArrayCollection;
			import mx.containers.Canvas;
			import mx.containers.VBox;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.controls.Tree;
			import mx.core.FlexGlobals;
			import mx.managers.PopUpManager;
			import mx.rpc.events.*;
			
			import system.component.WlzxLockWin;
			
			import spark.components.*;
			
			import system.component.checkTree.*;
			import system.entity.*;
			[Bindable]
			private var operationTree:CheckTree=new CheckTree();
			private var operationRoleId:String=null;
			private var operationSystemId:String=null;
			private function init():void {
				lockWin();
				systemServiceRO.getSystemBySymbol("root");
				systemServiceRO.getRoleBySymbol("basic_role")
				systemServiceRO.getAllRoles();
				operationTree.percentHeight=100;
				operationTree.percentWidth=100;
				operationTree.checkBoxStateField="@state";
				operationTree.labelField="@label";
				operationTree.checkBoxCloseItemsOnUnCheck=true;
				operationTree.checkBoxOpenItemsOnCheck=true;
				operationTree.checkBoxEnableState=true;
				operationTree.checkBoxCascadeOnCheck=true;
				operationTree.itemDClickSelect=true;
				operationTree.checkBoxBgColor=0x009900;
				//				operationTree.showRoot=false;
				
			}
		
			private function systemFaultHandler(event:FaultEvent):void {
				unLockWin();
				Alert.show(event.fault.faultString, 'Error');
			}
			public var roleList:ArrayCollection=new ArrayCollection();
			private function getAllRolesResult(event:ResultEvent):void {
//				var resultList:ArrayCollection = new ArrayCollection();
//				Alert.show(resultList.length+"");
				var allList:ArrayCollection=event.result as ArrayCollection;
				if(allList.length>0){
					for (var i:int = 0; i < allList.length; i++){
						var _role:RoleModel = allList.getItemAt(i) as RoleModel;
						var headText:String="";
						for(var j:int = 0;j<_role.level;j++)
							headText=headText.concat("--");
						headText=headText.concat(_role.name);
						roleList.addItem( {dataField:_role.id, headerText:headText})
					}
				}	
				this.roles.dataProvider=roleList;				
				switchRoleAuthorization();
				
			}
			private function getRoleBySymbolResult(event:ResultEvent):void {
				
				var _role:RoleModel = event.result as RoleModel;
				var headText:String="";
				headText=headText.concat("*");
				headText=headText.concat(_role.name);
				roleList.addItem( {dataField:_role.id, headerText:headText})
					
				
			}
		
			private function getSystemBySymbolResult(event:ResultEvent):void {
				var rootSystem:SystemModel =event.result as SystemModel ;
				var systemList:ArrayCollection = ArrayCollection(rootSystem.children);
				for (var i:int = 0; i < systemList.length; i++){
					addTab(systemList.getItemAt(i) as SystemModel);
				}
				switchSystemAuthorization();
			}
			private function getRoleSystemAuthorizationResult(event:ResultEvent):void {
			
				operationTree.percentHeight=100;
				operationTree.percentWidth=100;
				var data:XML=new XML(event.result.toString());
				operationTree.dataProvider = data;
				operationTree.validateDisplayList();
				callLater(function():void{					
					operationTree.validateNow();
					operationTree.expandChildrenOf(data[0],true);
				});
				
				var box:HBox=systems.selectedChild as HBox;
				box.removeAllChildren();
				box.addChild(operationTree);
				unLockWin();
				
			}
			private function saveRoleSystemAuthorizationResult(event:ResultEvent):void {
				unLockWin();
				if(event.result==true){
					Alert.show("岗位授权成功");
					reloadAuthHttp.send();					
				}
			}
			private function addTab(_system:SystemModel):void {
				var child:HBox = new HBox();
				child.name=_system.id;
				child.percentHeight=100;
				child.percentWidth=100;			
				child.label = _system.name;				
				systems.addChild(child);				
			}
			private function switchRoleAuthorization():void{
				
				operationRoleId=roles.selectedItem.dataField;
				
				if(operationRoleId!=null&&operationSystemId!=null){
					lockWin();
					systemServiceRO.getRoleSystemAuthorization(operationRoleId,operationSystemId);
				}
				
			}
			private function switchSystemAuthorization():void{
				
				operationSystemId=systems.selectedChild.name;
				if(operationRoleId!=null&&operationSystemId!=null){
					var box:HBox=systems.selectedChild as HBox;
					lockWin();
					systemServiceRO.getRoleSystemAuthorization(operationRoleId,operationSystemId);
					
				}
			}
		
			private function saveRoleAuthorization():void{
				//				Alert.show(operationRoleId);
				//				Alert.show(operationSystemId);
				var a:Object=operationTree.dataProvider;
				var xml:XMLList=new XMLList(a.toString());
				var adds:String="";
				var removes:String="";
				for each (var item:XML in xml..node)
				{
					if(item.@type!=null&&item.@type=="dam"){
						if(item.@state=="1")
							adds=adds.concat(item.@id+";");
						else 
							removes=removes.concat(item.@id+";");
					}
				} 
				lockWin();
				systemServiceRO.saveRoleSystemAuthorization(operationRoleId,operationSystemId,adds,removes);
			}
			private var window:WlzxLockWin=null;
			
			private function lockWin():void{
				if(window==null){
					window=new WlzxLockWin();
					PopUpManager.addPopUp(window,this,true);					
					PopUpManager.centerPopUp(window); 
				}
			}
			private function unLockWin():void{
				if(window!=null){
					PopUpManager.removePopUp(window);
					window=null;
				}
			}
			
			
			
		]]>
	</fx:Script>
		<mx:VBox width="100%" height="100%" verticalGap="0">
			<mx:HBox width="100%" height="35" paddingLeft="20"  horizontalGap="10" backgroundColor="#C5E497"  verticalAlign="middle" >
				<mx:Label text="|"/>
				<mx:Label text="岗位选择" textAlign="center"  />
				<mx:ComboBox width="200" id="roles" labelField="headerText"  selectedIndex="0" change="switchRoleAuthorization();" />
				<mx:LinkButton  label="保存"  id="roleSave" icon="@Embed(source='../WebContent/resources/common/tools/button_save_icon.png')" click="saveRoleAuthorization();"/>
				<mx:Label text="|"/>				
			</mx:HBox>
			
			<mx:TabNavigator id="systems"  width="100%" height="100%" tabStyleName="customTabStyles"  horizontalGap="1" borderVisible="false"  tabWidth="120" paddingTop="0"  change="switchSystemAuthorization();">
				
			</mx:TabNavigator>
		</mx:VBox>
		
	
</mx:Module>
