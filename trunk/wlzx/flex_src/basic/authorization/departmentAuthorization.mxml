<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx"  creationComplete="init();" width="100%" height="100%" xmlns:flexlib="http://code.google.com/p/flexlib/" >
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<!--定义 RemoteObject 组件-->
		<mx:RemoteObject id="systemServiceRO" destination="systemServiceDest" showBusyCursor="true" fault="systemFaultHandler(event);">
			<mx:method name="getDepartmentBySymbol"  concurrency="last"  result="getDepartmentBySymbolResult(event);" />
			<mx:method name="getSystemBySymbol"  concurrency="last"  result="getSystemBySymbolResult(event);" />
			<mx:method name="getDepartmentSystemAuthorization"  concurrency="last"  result="getDepartmentSystemAuthorizationResult(event);" />
			<mx:method name="saveDepartmentSystemAuthorization"  concurrency="last"  result="saveDepartmentSystemAuthorizationResult(event);" />
		</mx:RemoteObject>
	</fx:Declarations>
	<fx:Style>
		.customTabStyles {
			skin: ClassReference("system.skins.WlzxSubTabSkin");
			border:1px;
		}
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import basic.setting.popWin.DepartmentPopWin;
			
			import cn.org.rapid_framework.flex_security.SecurityControler;
			
			import flexlib.controls.SuperTabBar;
			import flexlib.controls.tabBarClasses.SuperTab;
			import flexlib.events.TabReorderEvent;
			
			import mx.collections.*;
			import mx.collections.ArrayCollection;
			import mx.containers.Canvas;
			import mx.containers.VBox;
			import mx.controls.Alert;
			import mx.controls.Tree;
			import mx.events.IndexChangedEvent;
			import mx.rpc.events.*;
			
			import org.aswing.util.HashMap;
			
			import spark.components.CheckBox;
			import spark.components.HGroup;
			import spark.components.RadioButton;
			import spark.components.VGroup;
			
			import system.component.checkTree.*;
			import system.entity.*;

			private var TAB_WIDTH:int=30;
			[Bindable]
			private var operationTree:CheckTree=new CheckTree();
			private var operationDepartmentId:String=null;
			private var operationSystemId:String=null;
			private function init():void {
				
				systemServiceRO.getSystemBySymbol("root");
				systemServiceRO.getDepartmentBySymbol("root");
				operationTree.percentHeight=100;
				operationTree.percentWidth=100;
				operationTree.checkBoxStateField="@state";
				operationTree.labelField="@label";
				operationTree.checkBoxCloseItemsOnUnCheck=true;
				operationTree.checkBoxOpenItemsOnCheck=true;
				operationTree.checkBoxEnableState=true;
				operationTree.checkBoxCascadeOnCheck=true;
				operationTree.itemDClickSelect=true;
				operationTree.checkBoxBgColor=0x009900;
//				operationTree.showRoot=false;
						
			}
			private function systemFaultHandler(event:FaultEvent):void {
				Alert.show(event.fault.faultString, 'Error');
			}
			private function getDepartmentBySymbolResult(event:ResultEvent):void {
				var department:Object=event.result;
				var resultList:ArrayCollection = new ArrayCollection();
				buildSubDepartments(department,resultList,0);				
				this.departments.dataProvider=resultList;				
				switchDepartmentAuthorization();
			}
			private function buildSubDepartments(department:Object,resultList:ArrayCollection,depth:int):void{
				var headText:String="";
				for(var j:int = 0;j<depth;j++)
					headText=headText.concat("-");
				headText=headText.concat(department.name);
				resultList.addItem( {dataField:department.id, headerText:headText})
				var list:ArrayCollection = ArrayCollection(department.subordinates);			
				if(list.length>0){
					for (var i:int = 0; i < list.length; i++){
						var _department:Object = list.getItemAt(i);	
						buildSubDepartments(_department,resultList,depth+1);
					}
				}		
				
			}
			private function getSystemBySymbolResult(event:ResultEvent):void {
				var rootSystem:SystemModel =event.result as SystemModel ;
				var systemList:ArrayCollection = ArrayCollection(rootSystem.children);
				for (var i:int = 0; i < systemList.length; i++){
					addTab(systemList.getItemAt(i) as SystemModel);
				}
				switchSystemAuthorization();
			}
			private function getDepartmentSystemAuthorizationResult(event:ResultEvent):void {
//				Alert.show("a");
//				Alert.show(event.result.toString());
				operationTree.percentHeight=100;
				operationTree.percentWidth=100;
				var data:XML=new XML(event.result.toString());
				operationTree.dataProvider = data;
				operationTree.validateDisplayList();
				callLater(function():void{					
					operationTree.validateNow();
					operationTree.expandChildrenOf(data[0],true);
				});
				
				var box:HBox=systems.selectedChild as HBox;
				box.removeAllChildren();
				box.addChild(operationTree);
//				Alert.show(box.id);
//				for (var key:String in event.result)
//				{
//					var value:String=event.result[key] as String;
//					addTab(key,value);
//				}
//				systems.selectedIndex=1;
			}
			private function saveDepartmentSystemAuthorizationResult(event:ResultEvent):void {
				if(event.result==true)
				Alert.show("部门授权成功");
			}
			
			
			private function addTab(_system:SystemModel):void {
				var child:HBox = new HBox();
				child.name=_system.id;
				child.percentHeight=100;
				child.percentWidth=100;			
				child.label = _system.name;
				child.id="bb"+_system.name;
//				var tree:CheckTree=new CheckTree();
//				tree.name="tree_"+_system.id;
//				tree.percentHeight=100;
//				tree.percentWidth=100;
//				//				operationTree.dataProvider = new XML(value);		
//				tree.checkBoxStateField="@state";
//				tree.labelField="@label";
//				tree.checkBoxCloseItemsOnUnCheck=true;
//				tree.checkBoxOpenItemsOnCheck=true;
//				tree.checkBoxEnableState=true;
//				tree.checkBoxCascadeOnCheck=true;
//				tree.itemDClickSelect=true;
//				tree.checkBoxBgColor=0x009900;
//				tree.showRoot=false;
//				child.addChild(tree);
				systems.addChild(child);				
			}
//			private function addTab(_system:Object):void {
//				var child:HBox = new HBox();
//				child.percentHeight=100;
//				child.percentWidth=100;			
//				child.label = _system.name;
//				var vGroup:VGroup=new VGroup();
//				buildSubSystem(_system,vGroup,0);
//				child.addChild(vGroup);
//				systems.addChild(child);
//				
//			}
//		
//			private function buildSubSystem(system:Object,vGroup:VGroup,depth:int):void {
//				var systemList:ArrayCollection = ArrayCollection(system.children);
//				if(systemList.length>0){
//					for (var i:int = 0; i < systemList.length; i++){
//						var _system:Object = systemList.getItemAt(i);	
//						var vSubGroup:VGroup=new VGroup();
//						var hGroup:HGroup=new HGroup();
//						var checkBox:CheckBox=new CheckBox();
//						checkBox.id="system_"+_system.id;
//						var label:Label=new Label();		
//						label.text=_system.name;
//						var tabGroup:HGroup=new HGroup();
//						tabGroup.width=depth*TAB_WIDTH;
//						hGroup.addElement(tabGroup);
//						hGroup.addElement(checkBox);
//						hGroup.addElement(label);
//						vSubGroup.addElement(hGroup);
//						buildSubSystem(_system,vSubGroup,depth+1);
//						vGroup.addElement(vSubGroup);			
//					}
//					
//				}else{
//					var menuList:ArrayCollection = ArrayCollection(system.menus);
//					for (var j:int = 0; j < menuList.length; j++){
//						var menu:Object = menuList.getItemAt(j);	
//						buildSubMenu(menu,vGroup,depth);
//					}
//					
//				}
//			}
//			private function buildSubMenu(menu:Object,vGroup:VGroup,depth:int):void {
//						var vSubGroup:VGroup=new VGroup();
//						var hGroup:HGroup=new HGroup();
//						var checkBox:CheckBox=new CheckBox();
//						checkBox.id="menu_"+menu.id;
//						var label:Label=new Label();		
//						label.text=menu.name;
//						var tabGroup:HGroup=new HGroup();
//						tabGroup.width=depth*TAB_WIDTH;
//						hGroup.addElement(tabGroup);
//						hGroup.addElement(checkBox);
//						hGroup.addElement(label);
//						vSubGroup.addElement(hGroup);
//						var subMenuList:ArrayCollection = ArrayCollection(menu.children);
//						if(subMenuList.length>0){
//							for (var i:int = 0; i < subMenuList.length; i++){
//								var subMenu:Object = subMenuList.getItemAt(i);	
//								buildSubMenu(subMenu,vSubGroup,depth+1);
//							}
//						}else{
//							var subModuleList:ArrayCollection = ArrayCollection(menu.modules);
//							for (var j:int = 0; j < subModuleList.length; j++){
//								var module:Object = subModuleList.getItemAt(j);	
//								buildSubModule(module,vSubGroup,depth+1);
//							}
//						}
//						vGroup.addElement(vSubGroup);			
//				
//			}
//			private function buildSubModule(module:Object,vGroup:VGroup,depth:int):void {
//				var vSubGroup:VGroup=new VGroup();
//				var hGroup:HGroup=new HGroup();
//				var checkBox:CheckBox=new CheckBox();
//				checkBox.id="module_"+module.id;
//				var label:Label=new Label();		
//				label.text=module.name;
//				var tabGroup:HGroup=new HGroup();
//				tabGroup.width=depth*TAB_WIDTH;
//				hGroup.addElement(tabGroup);
//				hGroup.addElement(checkBox);
//				hGroup.addElement(label);
//				vSubGroup.addElement(hGroup);
//				var subModuleList:ArrayCollection = ArrayCollection(module.children);
//				if(subModuleList.length>0){
//					for (var i:int = 0; i < subModuleList.length; i++){
//						var subModule:Object = subModuleList.getItemAt(i);	
//						buildSubModule(subModule,vSubGroup,depth+1);
//					}
//				}else{
////					Alert.show("a");
//					var operationList:ArrayCollection = ArrayCollection(module.operations);
////					Alert.show(operationList.toString());
//					var hSubGroup:HGroup=new HGroup();
//					for (var j:int = 0; j < operationList.length; j++){
//						var operation:Object = operationList.getItemAt(j);	
//						
//						buildSubOperation(operation,hSubGroup,depth+1);
//						
//					}
//					vSubGroup.addElement(hSubGroup);
//				}
//				vGroup.addElement(vSubGroup);	
//			}
//			private function buildSubOperation(operation:Object,vGroup:HGroup,depth:int):void {
//				var vSubGroup:HGroup=new HGroup();
//				var hGroup:HGroup=new HGroup();
//				var checkBox:CheckBox=new CheckBox();
//				checkBox.id="operation_"+operation.id;
//				var label:Label=new Label();		
//				label.text=operation.name;
//				var tabGroup:HGroup=new HGroup();
//				tabGroup.width=depth*TAB_WIDTH;
//				hGroup.addElement(tabGroup);
//				hGroup.addElement(checkBox);
//				hGroup.addElement(label);
//				vSubGroup.addElement(hGroup);
//				var dataAccessModesList:ArrayCollection = ArrayCollection(operation.dataAccessModes);
//				
//					for (var i:int = 0; i < dataAccessModesList.length; i++){
//						var dataAccessMode:Object = dataAccessModesList.getItemAt(i);
//						var aLabel:Label=new Label();		
//						aLabel.text="->数据[";
//						vSubGroup.addElement(aLabel);
//						buildSubDataAccessMode(dataAccessMode,vSubGroup,depth+1);
//						var bLabel:Label=new Label();		
//						bLabel.text="]";
//						vSubGroup.addElement(bLabel);
//						vSubGroup.verticalAlign="top";
//						vSubGroup.horizontalAlign="center";
//					}
//			
//				vGroup.addElement(vSubGroup);	
//			}
//			private function buildSubDataAccessMode(dataAccessMode:Object,vGroup:HGroup,depth:int):void {
//				var vSubGroup:VGroup=new VGroup();
//				var hGroup:HGroup=new HGroup();
//				
//				var checkBox:RadioButton=new RadioButton();
//				checkBox.id="dataAccessMode_"+dataAccessMode.id;
//				var label:Label=new Label();		
//				label.text=dataAccessMode.name;
//				hGroup.addElement(checkBox);
//				hGroup.addElement(label);
//				vSubGroup.addElement(hGroup);
//				vGroup.addElement(vSubGroup);	
//			}
			private function switchDepartmentAuthorization():void{
				operationDepartmentId=departments.selectedItem.dataField;
				if(operationDepartmentId!=null&&operationSystemId!=null){
					
					systemServiceRO.getDepartmentSystemAuthorization(operationDepartmentId,operationSystemId);
				}

//				systemServiceRO.getDepartmentAuthorization(departments.selectedItem.dataField);
			}
			private function switchSystemAuthorization():void{
				operationSystemId=systems.selectedChild.name;
				if(operationDepartmentId!=null&&operationSystemId!=null){
					var box:HBox=systems.selectedChild as HBox;
					
					systemServiceRO.getDepartmentSystemAuthorization(operationDepartmentId,operationSystemId);
					
				}
			}
			private function saveDepartmentAuthorization():void{
//				Alert.show(operationDepartmentId);
//				Alert.show(operationSystemId);
				var a:Object=operationTree.dataProvider;
				var xml:XMLList=new XMLList(a.toString());
				var adds:String="";
				var removes:String="";
				for each (var item:XML in xml..node)
				{
					if(item.@type!=null&&item.@type=="dam"){
						if(item.@state=="1")
							adds=adds.concat(item.@id+";");
						else 
							removes=removes.concat(item.@id+";");
					}
				} 
				systemServiceRO.saveDepartmentSystemAuthorization(operationDepartmentId,operationSystemId,adds,removes);
			}
			
			
		]]>
	</fx:Script>
		<s:Panel width="100%" height="100%" title="部门授权"  skinClass="system.skins.WlzxPanelSkin"   borderVisible="true" dropShadowVisible="false">
			<mx:VBox width="100%" height="100%" verticalGap="0">
				<mx:HBox width="100%" height="35" paddingLeft="20"  horizontalGap="10" backgroundColor="#C5E497"  verticalAlign="middle" >
					<mx:Label text="|"/>
					<mx:Label text="部门选择" textAlign="center"  />
					<mx:ComboBox   width="200" id="departments" labelField="headerText"  selectedIndex="0" change="switchDepartmentAuthorization();" />
					<mx:LinkButton  label="保存"  id="departmentSave" icon="@Embed(source='../WebContent/resources/common/tools/button_save_icon.png')" click="saveDepartmentAuthorization();"/>
					<mx:Label text="|"/>				
				</mx:HBox>
				
				<mx:TabNavigator id="systems"  width="100%" height="100%" tabStyleName="customTabStyles"  horizontalGap="1" borderVisible="false"  tabWidth="120" paddingTop="0"  change="switchSystemAuthorization();">
					
				</mx:TabNavigator>
			</mx:VBox>
			
		</s:Panel>
		
</mx:Module>
