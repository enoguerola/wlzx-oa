<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:editor="com.flexcalendar.components.calendar.editor.*"
		   minHeight="{basicHeight}"
		   backgroundAlpha="1.0" backgroundColor="#EEF0FF" borderColor="{bColor}" cornerRadius="5" 
		   borderStyle="solid" creationComplete="onCreationComplete()">
	<mx:Script>
    <![CDATA[
		import com.flexcalendar.components.calendar.events.CalendarMouseEvent;
		import com.flexcalendar.components.calendar.editor.builders.*;
		import mx.collections.ArrayCollection;
		import mx.controls.Alert;
		import mx.core.Application;
		import mx.managers.PopUpManager;
		import mx.events.FlexEvent;
		import system.utils.ComboxUtils;
		private const bColor:Number = 0xa1a1a1;

		[Embed(source="../WebContent/resources/common/ui/tabClose.swf", symbol="firefox_close_over")]
		protected const closeImg:Class;

		[Bindable]
		public var item:MyItemEditorVO;

		[Bindable]
		public var isNew:Boolean = false;

		public var saveCallback:Function;
		public var cancelCallback:Function;
		public var deleteCallback:Function;

		[Bindable]
		private var descWidth:int = 100;
		[Bindable]
		private var editWidth:int = 380;
		[Bindable]
		private var basicHeight:int = 300;
		[Bindable]
		private var tipHeight:int = 140;

		[Bindable]
		private var tipShouldBeDrawn:Boolean = true;

		[Bindable]
		public var repeatVariants:ArrayCollection;

		[Bindable]
		public var intervalVariants:ArrayCollection;

		[Bindable]
		public var types:ArrayCollection=new ArrayCollection(
			[ {label:"私人日程", data:0},
				{label:"工作日程", data:1}]);
		public var emergences:ArrayCollection=new ArrayCollection(
			[ {label:"一般", data:3},
				{label:"紧急", data:2},
				{label:"重要", data:1},
				{label:"重要紧急", data:0}]);
		protected var _tip:Canvas;

		private function get neededHeight():Number
		{
			return basicHeight + tipHeight;
		}

		public function calculatePosition(clickX:Number, clickY:Number):void
		{
			var horizontalAllowedForTipDrawing:Boolean;
			if (this.parent.width - this.width > clickX + 115 )
			{
				this.x = clickX + 115;
				horizontalAllowedForTipDrawing = true;
			} else
			{
				this.x = this.parent.width - this.width;
				horizontalAllowedForTipDrawing = false;
			}

			this.y = clickY > this.neededHeight? clickY - this.neededHeight + 20: 0;
			if (clickY > this.neededHeight)
			{
				tipShouldBeDrawn = true && horizontalAllowedForTipDrawing;
			} else
			{
				tipShouldBeDrawn = false;
			}
		}

		private function displayRepeatEvery(recurId:int):Boolean
		{
			return recurId != 1 && recurId != 2 && recurId != 3;
		}

		private function repeatOnVisible(recurId:int):Boolean
		{
			return recurId == 4;
//			return false;
		}

		private function OnClose():void
		{
			cancelCallback();
		}

		private function onCreationComplete():void
		{
			this.repeatVariants = new RepeatVariantsBuilder().repeatVariants;
			this.intervalVariants = new IntervalVariantsBuilder().intervalVariants;
			this.addEventListener(KeyboardEvent.KEY_UP, keyHandler, false, 0, true);
//			Alert.show(item.repeatRuleId+"");
//			Alert.show(item.interval+"");
			this.emergence.selectedIndex=ComboxUtils.findIndex(emergences,item.emergence);
			this.repeats.selectedIndex=item.repeatRuleId;
			this.interval.selectedIndex=item.interval;
			this.type.selectedIndex=item.type;
			this.departmentShare.selected=item.departmentShare;
			this.schoolShare.selected=item.schoolShare;
			callLater(function():void{
//				Alert.show(item.MO+"");
//				Alert.show(item.TH+"");
				this.w1.selected=item.MO;
				this.w2.selected=item.TU;
				this.w3.selected=item.WE;
				this.w4.selected=item.TH;
				this.w5.selected=item.FR;
				this.w6.selected=item.SA;
				this.w7.selected=item.SU;
			
			});
		//	emergence.selectedIndex=3;
			setDayNames();
	//		DrawTipMark();
//			callLater(initWin);
			
		}
		
//		private function initWin():void{
//			if(this.toolTip=='Update'){		
//				var id:String=this.id;//弹出窗口时设定的中转参数
//			
//			}else if(this.toolTip=='Add'){
////				place=new PlaceModel();
//				this.isNew=true;
//				recurringArea.visible=false;
//				repeatRuleArea.visible=false;
//				this.validateDisplayList();
//			}
//			
//			
//		}
		private function keyHandler(event:KeyboardEvent):void {
			if (event.keyCode == Keyboard.ESCAPE)
			{
				cancelCallback();
			}
        }

		private function setDayNames():void
		{
			var dayLetters:Array = resourceManager.getString("controls", "dayNamesShortest").split(",");
			w1.label = dayLetters[1];
			w2.label = dayLetters[2];
			w3.label = dayLetters[3];
			w4.label = dayLetters[4];
			w5.label = dayLetters[5];
			w6.label = dayLetters[6];
			w7.label = dayLetters[0];
		}

		private function DrawTipMark():void
		{
			var pt:Point = new Point(105, basicHeight + tipHeight);
			var global:Point = Application.application.localToGlobal(pt);
			var origin:Point = global;
			var destination:Point = new Point(200, basicHeight - 2);
			var lineThickness:Number = 1;
			var lineColor:Number = bColor;
			var lineAlpha:Number = 1;

			_tip = new Canvas();

			_tip.graphics.clear();
			_tip.graphics.beginFill(0xffffff, 1);

			_tip.graphics.lineStyle(lineThickness, lineColor, lineAlpha);
			_tip.graphics.moveTo(origin.x, origin.y);
			_tip.graphics.lineTo(destination.x, destination.y);
			_tip.graphics.lineStyle(lineThickness, 0xffffff, lineAlpha);
			_tip.graphics.lineTo(160, basicHeight - 2);
			_tip.graphics.lineStyle(lineThickness, lineColor, lineAlpha);
			_tip.graphics.lineTo(origin.x, origin.y);
			_tip.graphics.endFill();
			_tip.visible = !item.recurring && tipShouldBeDrawn;
			addChild(_tip);

		}

		private function onRecuringSelected(selected:Boolean):void
		{
			item.recurring = selected;
			_tip.visible = !selected && tipShouldBeDrawn;
		}

    ]]>
</mx:Script>


	<mx:Metadata>
		[ResourceBundle("FlexCalendar")]
	</mx:Metadata>

	<mx:Image right="10" x="272" y="10" source="{closeImg}" click="OnClose()"/>


	<mx:VBox top="30" left="10" right="25" verticalGap="10">
		<mx:HBox horizontalGap="10" width="100%">
			<mx:Label text="{resourceManager.getString('FlexCalendar','editor.type')}" width="{descWidth}"/>
			<mx:ComboBox id="type" labelField="label" dataProvider="{types}" 
						 change="item.type = type.selectedItem.data;if(type.selectedItem.data=='0'){item.schoolShare=schoolShare.selected=false;item.departmentShare =departmentShare.selected=false;}"/>
		</mx:HBox>
		<mx:HBox horizontalGap="10" width="100%">
			<mx:Label text="{resourceManager.getString('FlexCalendar','editor.emergence')}" width="{descWidth}"/>
			<mx:ComboBox id="emergence" labelField="label" dataProvider="{emergences}" change="item.emergence = emergence.selectedItem.data"/>
		</mx:HBox>
		<mx:HBox horizontalGap="10" width="100%" visible="{item.type==1}">
			<mx:Label text="{resourceManager.getString('FlexCalendar','editor.share')}" width="{descWidth}"/>
			<mx:CheckBox id="schoolShare" label="{resourceManager.getString('FlexCalendar','editor.schoolShare')}" change="item.schoolShare = schoolShare.selected"   enabled="{parentApplication.currentUser.hasDam('canShareInSchool@noFilter@')}"/>
			<mx:CheckBox id="departmentShare" label="{resourceManager.getString('FlexCalendar','editor.departmentShare')}" change="item.departmentShare = departmentShare.selected"  enabled="{parentApplication.currentUser.hasDam('canShareInDepartment@noFilter@')}"/>
		</mx:HBox>
	
		<mx:HBox horizontalGap="10" width="100%">
			<mx:Label text="{resourceManager.getString('FlexCalendar','editor.summary')}" width="{descWidth}"/>
			<mx:TextInput id="summary" text="{item.summary}" width="100%" change="item.summary = summary.text"/>
		</mx:HBox>

		<mx:HBox horizontalGap="10" width="100%">
			<mx:Label text="{resourceManager.getString('FlexCalendar','editor.description')}" width="{descWidth}"/>
			<mx:TextArea id="description" text="{item.description}" width="100%" change="item.description = description.text"/>
		</mx:HBox>


		<mx:HBox horizontalGap="10" width="100%">
			<mx:Label text="{resourceManager.getString('FlexCalendar','editor.from')}" width="{descWidth}"/>
			<editor:DateTimeChooser id="start" selectedDate="{item.start}" width="100%"   
									change="item.start = start.selectedDate"/>
		</mx:HBox>

		<mx:HBox horizontalGap="10" width="100%">
			<mx:Label text="{resourceManager.getString('FlexCalendar','editor.to')}" width="{descWidth}"/>
			<editor:DateTimeChooser id="end" selectedDate="{item.end}" width="100%" change="item.end = end.selectedDate"/>
		</mx:HBox>

		<mx:HBox horizontalGap="10" width="100%">
			<mx:Label text="{resourceManager.getString('FlexCalendar','editor.repeat')}" width="{descWidth}"/>
			<mx:CheckBox id="recurring" selected="{item.recurring}" change="onRecuringSelected(recurring.selected)" />
		</mx:HBox>


		<mx:VBox visible="{item.recurring}" includeInLayout="{item.recurring}" width="100%" id="recurringArea">

			<mx:HBox horizontalGap="10" width="100%">
				<mx:Label text="{resourceManager.getString('FlexCalendar','editor.repeats')}" width="{descWidth}"/>
				<mx:ComboBox id="repeats" labelField="label" dataProvider="{repeatVariants}" selectedIndex="{item.repeatRuleId}"
							 change="item.repeatRuleId = repeats.selectedIndex;"/>
			</mx:HBox>

			<mx:HBox visible="{displayRepeatEvery(item.repeatRuleId)}" includeInLayout="{displayRepeatEvery(item.repeatRuleId)}" horizontalGap="10" width="100%">
				<mx:Label text="{resourceManager.getString('FlexCalendar','editor.repeatsInterval')}" width="{descWidth}"/>
				<mx:ComboBox id="interval" labelField="label" dataProvider="{intervalVariants}" selectedIndex="{item.interval}"
							 change="item.interval = interval.selectedIndex"/>
			</mx:HBox>

			<mx:HBox visible="{repeatOnVisible(item.repeatRuleId)}" includeInLayout="{item.repeatRuleId == 4}" horizontalGap="10" width="100%" id="repeatRuleArea">
				<mx:Label text="{resourceManager.getString('FlexCalendar','editor.repeatOn')}" width="{descWidth}"/>
				<mx:CheckBox id="w1" label="M" selected="{item.MO}" change="item.MO = w1.selected"/>
				<mx:CheckBox id="w2" label="T" selected="{item.TU}" change="item.TU = w2.selected"/>
				<mx:CheckBox id="w3" label="W" selected="{item.WE}" change="item.WE = w3.selected"/>
				<mx:CheckBox id="w4" label="T" selected="{item.TH}" change="item.TH = w4.selected"/>
				<mx:CheckBox id="w5" label="F" selected="{item.FR}" change="item.FR = w5.selected"/>
				<mx:CheckBox id="w6" label="S" selected="{item.SA}" change="item.SA = w6.selected"/>
				<mx:CheckBox id="w7" label="S" selected="{item.SU}" change="item.SU = w7.selected"/>
			</mx:HBox>

			<mx:HBox horizontalGap="10" width="100%">
				<mx:Label text="{resourceManager.getString('FlexCalendar','editor.endsOn')}" width="{descWidth}"/>
				<mx:CheckBox id="endDateSpecified" label="{resourceManager.getString('FlexCalendar','editor.never')}" selected="{!item.endDateSpecified}"
							 change="item.endDateSpecified = !endDateSpecified.selected"/>
				<editor:DateTimeChooser id="endsOn" selectedDate="{item.endDate}"  enabled="{item.endDateSpecified}"
							  change="item.endDate = endsOn.selectedDate"/>
			</mx:HBox>

		</mx:VBox>

		<mx:Box horizontalAlign="right" width="100%">
			<mx:HBox>
				<mx:Button label="{resourceManager.getString('FlexCalendar','editor.save')}" width="70" click="{saveCallback()}"/>
				<mx:Button label="{resourceManager.getString('FlexCalendar','editor.delete')}" width="70" click="{deleteCallback()}" visible="{!isNew}"/>
				<mx:Button label="{resourceManager.getString('FlexCalendar','editor.cancel')}" width="70" click="{cancelCallback()}"/>
			</mx:HBox>
		</mx:Box>
		<mx:Box height="10" id="bottomSpacer">

		</mx:Box>
	</mx:VBox>

</mx:Canvas>
