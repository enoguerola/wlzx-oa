<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:local="*" xmlns:mx="http://www.adobe.com/2006/mxml"
		   xmlns:flexcalendar="com.flexcalendar.components.calendar.*"
		   xmlns:myflexcalendar="oa.schedule.*"
		   height="100%" width="100%" creationComplete="init();"
		  >

	<!-- To build with maven comment this line -->
	<!--<mx:Style source="flex3/defaults.css" />-->
	
	<mx:Style>
		DefaultCalendarDayViewAvailableSpaceRenderer
		{
			textColor: #000000;
			rendererAlpha: 1;
			backgroundColor: #ffffff;
			headerBackgroundColor: #ffffff;
			borderColor: #dedede;
			backgroundType: "solid";
		}
		
		DefaultCalendarDayViewUnavailableSpaceRenderer
		{
			rendererAlpha: 1;
			backgroundColor: #dedede;
			headerBackgroundColor: #dedede;
			borderColor: #ffffff;
			backgroundType: "solid";
		}
	</mx:Style>
	<mx:RemoteObject id="systemServiceRO" destination="systemServiceDest" showBusyCursor="true" fault="systemFaultHandler(event);">
		<mx:method name="getDepartmentBySymbol"  concurrency="last"  result="getDepartmentBySymbolResult(event);" />
	</mx:RemoteObject>
	<mx:Script>
		<![CDATA[
			import com.flexcalendar.components.calendar.core.DateRange;
			import com.flexcalendar.components.calendar.core.dataModel.CalendarDataProvider;
			import com.flexcalendar.components.calendar.editor.baloon.BaloonItemEditor;
			import com.flexcalendar.components.calendar.events.CalendarItemAddedEvent;
			import com.flexcalendar.components.calendar.events.CalendarItemModificationEvent;
			import com.flexcalendar.components.calendar.events.CalendarItemRemovedEvent;
			import com.flexcalendar.components.calendar.events.CalendarMouseEvent;
			import com.flexcalendar.components.calendar.utils.CalendarMode;
			import com.flexcalendar.components.calendar.utils.DateUtils;
			
			import mx.controls.Alert;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.collections.ArrayCollection;
			import mx.rpc.events.*;
			import system.entity.*;
			import system.utils.CommonUtils;
			[Bindable]
			public var dp:CalendarDataProvider;
			
			[Bindable]
			public var visibleDateRange:DateRange;
			
			public var scheduleScope:ArrayCollection = new ArrayCollection(); 
			public var scheduleState:ArrayCollection = new ArrayCollection( 
				[ {label:"全部", data:null},  
					{label:"进行中", data:1},
					{label:"已完结", data:2}]); 
			
			protected function init(event:Event = null):void {
				fromDateChooser.addEventListener(CalendarLayoutChangeEvent.CHANGE, updateRange);
				toDateChooser.addEventListener(CalendarLayoutChangeEvent.CHANGE, updateRange);
				
				//create sample CalendarDataProvider
				dp = new DataProviderBuilder().buildExampleDataProvider();
				
				var today:Date = DateUtils.startOfDay(new Date());
				
				var startRange:Date = DateUtils.startOfDay(new Date());
				var endRange:Date = DateUtils.endOfDay(new Date());
				
				
				DateUtils.addDays(startRange, 0 - today.day);
				DateUtils.addDays(endRange, 0 - today.day + 6);
				
				visibleDateRange = new DateRange(startRange, endRange);
				
				hideSy();
				systemServiceRO.getDepartmentBySymbol("root");//初始化部门数据字典
				
				
			}
			protected function systemFaultHandler(event:FaultEvent):void {
				Alert.show(event.fault.faultString, 'Error');
			}
			private function getDepartmentBySymbolResult(event:ResultEvent):void {
				var _department:DepartmentModel = event.result as DepartmentModel;
				buildSubDepartments(_department,scheduleScope,0);
				var _init1:Object = {name:'全部',value:null};
				scheduleScope.addItemAt(_init1,0);
				var _init2:Object = {name:'学校日程',value:'1'};
				scheduleScope.addItemAt(_init2,1);
				scope.selectedIndex = 0;
			}
			private function buildSubDepartments(department:DepartmentModel,resultList:ArrayCollection,depth:int):void{
				var headText:String="";
				for(var j:int = 0;j<depth;j++)
					headText=headText.concat("--");
				headText=headText.concat(department.name);
				resultList.addItem( {dataField:department.id, name:headText})
				var list:ArrayCollection = ArrayCollection(department.subordinates);			
				if(list.length>0){
					for (var i:int = 0; i < list.length; i++){
						var _department:DepartmentModel = list.getItemAt(i) as DepartmentModel;	
						buildSubDepartments(_department,resultList,depth+1);
					}
				}		
			}
			//隐藏水印代码
			private function hideSy():void{
				var sy:Sprite=flexCalendar.getChildAt(3) as Sprite;
				//					flexCalendar.removeChildAt(3);
				//					flexCalendar.refresh();
				sy.visible=false;
				sy.alpha=0;
				//					Alert.show(sy.toString());
			}
			protected function updateRange(event:CalendarLayoutChangeEvent):void {
				
				//sanity check
				if (toDateChooser.selectedDate < fromDateChooser.selectedDate) {
					//reset val	ues
					fromDateChooser.selectedDate = flexCalendar.visibleRange.start;
					toDateChooser.selectedDate = flexCalendar.visibleRange.end;
				}
				else {
					flexCalendar.visibleRange = new DateRange(DateUtils.startOfDay(fromDateChooser.selectedDate),
						DateUtils.endOfDay(toDateChooser.selectedDate));
				}
			}
			
//			private function calendarMouseClickHandler(event:CalendarMouseEvent):void {
//				trace("Selected date: " + event.selectedDate);
//				trace("Preferred new event time: " + event.preferredTimeInMills);
//				trace("Mouse event: " + event.event);
//			}
//			
//			
//			private function calendarRendererMouseClickHandler(event:CalendarMouseEvent):void {
//				trace("Selected renderer start date: " + event.selectedDate);
//				trace("Selected item details: " + event.item)
//				trace("Selected item summary: " + event.item.summary);
//				trace("Mouse event: " + event.event);
//			}
			
			private function calendarItemAdded(event:CalendarItemAddedEvent):void {
				trace("Item added");
			}
			
			private function calendarItemRemoved(event:CalendarItemRemovedEvent):void {
				trace("Item removed");
			}
			
			private function calendarItemModified(event:CalendarItemModificationEvent):void {
				trace("Item modified");
			}
//			
//			[Bindable]
//			private var locales:Array = ["en_US", "pt_BR"];
//			[Bindable]
//			private var defaultLocale:Object;
//			
//			private function localeComboChangeHandler():void {
//				resourceManager.localeChain = [ localeComboBox.selectedItem, "en_US"];
//			}
		]]>
	</mx:Script>
	
<!--	<mx:Metadata>
		[ResourceBundle("sampleApp")]
	</mx:Metadata>-->
	
	<mx:HBox height="30" width="100%" verticalAlign="middle" horizontalAlign="left">
		<mx:Label text="起止日期：" width="70">
			
		</mx:Label>
		<mx:DateField width="100" editable="false" id="fromDateChooser" selectedDate="{flexCalendar.visibleRange.start}"  formatString="YYYY-MM-DD">
			
		</mx:DateField>
		<mx:Label text="--" width="20">
			
		</mx:Label>
		<mx:DateField width="100" editable="false" id="toDateChooser" selectedDate="{flexCalendar.visibleRange.end}" formatString="YYYY-MM-DD">
			
		</mx:DateField>
		<mx:Label text="日程范围：" width="70" >
			
		</mx:Label>
		<mx:ComboBox id="scope" width="130" dataProvider="{scheduleScope}" selectedIndex="0" labelField="name">
			
		</mx:ComboBox>
		<mx:Label text="日程状态：" width="70">
			
		</mx:Label>
		<mx:ComboBox width="100"   id="state" dataProvider="{scheduleState}" >
			
		</mx:ComboBox>
		<mx:CheckBox id="entireCalendarReadonly" label="只读" selected="true" width="80" />									
		
	</mx:HBox>
	<mx:HBox width="100%" height="100%">
		
		
		<flexcalendar:FlexCalendar  license="xxxx-xxx-xxx-xx-xxx" id="flexCalendar" width="100%" height="100%" dataProvider="{dp}" scaleX="1" visibleRange="{visibleDateRange}"
								   scaleY="1" itemEditor="{new BaloonItemEditor(flexCalendar, false, false)}"
								   calendarMode="{entireCalendarReadonly.selected?CalendarMode.READ_ONLY_MODE : CalendarMode.LIMITED_EDIT_MODE}"
								   headerVisible="true"
								   currentTimeIndicator="true"
								   currentDayIndicator="true"
								   doubleClickEnabled="true"
								   calendarItemAddedEvent="calendarItemAdded(event)"
								   calendarItemRemovedEvent="calendarItemRemoved(event)"
								   calendarItemModificationEvent="calendarItemModified(event)"
								   
								   calendarMouseClick="trace('calendarMouseClick')"
								   calendarMouseDoubleClick="trace('calendarMouseDoubleClick')"
								   calendarRendererMouseClick="trace('calendarRendererMouseClick')"
								   calendarRendererMouseDoubleClick="trace('calendarRendererMouseDoubleClick')"
								   calendarSpaceRendererMouseClick="trace('calendarSpaceRendererMouseClick')"
								   calendarSpaceRendererMouseDoubleClick="trace('calendarSpaceRendererMouseDoubleClick')"
								   />
		
	</mx:HBox>
	
	
</mx:Module>
