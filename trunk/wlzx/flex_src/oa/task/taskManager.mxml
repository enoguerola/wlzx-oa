<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" 
		   xmlns:hc="com.hillelcoren.components.*"
		   xmlns:render="system.component.render.*"
		   layout="vertical" width="100%" creationComplete="init();" height="100%" 
		   xmlns:validator="system.component.validator.*" 
		   xmlns:valueObjects="oa.entity.*" 
		   xmlns:component="system.component.*" currentState="list" xmlns:mx1="library://ns.adobe.com/flex/mx" 
		   xmlns:mutiUpload="system.component.mutiUpload.*">
	<mx:RemoteObject id="taskServiceRO" destination="taskServiceDest" showBusyCursor="true" fault="systemFaultHandler(event);">
		<mx:method name="updateTask"  concurrency="last"  result="updateTaskResult_resultHandler(event);" />
		<mx:method name="loadTaskInfoById"  concurrency="last"  result="loadTaskInfoById_resultHandler(event);" />
		<mx:method name="deleteTaskById"  concurrency="last"  result="deleteTaskByIdResult_resultHandler(event);" />
		<mx:method name="getTasksByConditions"  concurrency="last"  result="getTasksByConditions_resultHandler(event);" />
	</mx:RemoteObject>
	
	<valueObjects:TaskModel id="form"/>
	
	<mx:StringValidator id="title_stringValidator" source="{title}" property="text"  requiredFieldError="任务标题 不能为空"/>
	<mx:StringValidator id="content_stringValidator" source="{content}" property="text"  requiredFieldError="任务内容不能为空"/>
	<mx:StringValidator id="accounts_id_stringValidator" source="{accounts_id}" property="text"  requiredFieldError="任务责任人 不能为空"/>
	<mx:StringValidator id="assigner_id_stringValidator" source="{assigner_id}" property="text"  requiredFieldError="任务指派人不能为空"/>
	<mx:states>
		<mx:State name="list">           
			<mx:RemoveChild target="{addPanel}"/>
		</mx:State>
		<mx:State name="add" enterState="add_activateHandler(event)">           
			<mx:RemoveChild target="{listPanel}"/>
		</mx:State>
	</mx:states>
	<mx:transitions>
		<mx:Transition id="myTransition1" fromState="list" toState="*" >
			<mx:Parallel id="t1" target="{addPanel}" >
				<mx:WipeLeft duration="1500"></mx:WipeLeft>
			</mx:Parallel>
		</mx:Transition>
		<mx:Transition id="myTransition2" fromState="*" toState="list" >
			<mx:Parallel id="t2" target="{listPanel}" >
				<mx:WipeRight duration="800">
				</mx:WipeRight>
			</mx:Parallel>
		</mx:Transition>
	</mx:transitions>
	
	<mx:Script> 
		<![CDATA[
			import basic.utils.DateUtil;
			
			import mx.collections.ArrayCollection;
			import mx.containers.FormItem;
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.core.FlexGlobals;
			import mx.events.*;
			import mx.events.ListEvent;
			import mx.events.ValidationResultEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.PopUpManager;
			import mx.rpc.events.*;
			import mx.validators.Validator;
			
			import system.component.WlzxLockWin;
			import system.component.validator.ComboxValidator;
			import system.entity.DepartmentModel;
			import system.utils.*;
			import system.utils.ComboxUtils;
			
			private var validatorArr:Array;
			
			public var taskStateList:ArrayCollection = new ArrayCollection( 
				[	{label:"全部", data:null},  
					{label:"进行中", data:"0"},  
					{label:"已完成", data:"1"}]); 
		
			
			[Bindable] 
			public var departmentList:ArrayCollection = new ArrayCollection();
			
			private function init():void{
				this.currentState='list';
			
				search_accounts.dataProvider=this.parentApplication.allTeacherAcccounts;
				search_assigner.dataProvider=this.parentApplication.allTeacherAcccounts;
				accounts.dataProvider=this.parentApplication.allTeacherAcccounts;
				assigner.dataProvider=this.parentApplication.allTeacherAcccounts;
//				taskTable.Pre.addEventListener(MouseEvent.CLICK,search);
//				taskTable.Next.addEventListener(MouseEvent.CLICK,search);
//				taskTable.First.addEventListener(MouseEvent.CLICK,search);
//				taskTable.Last.addEventListener(MouseEvent.CLICK,search);
//				taskTable.Switch.addEventListener(MouseEvent.CLICK,search);
				search();
			}
			protected function systemFaultHandler(event:FaultEvent):void {
				unLockWin();
				Alert.show(event.fault.faultString, 'Error');
				
			}
			protected function updateTaskResult_resultHandler(event:ResultEvent):void
			{
				Alert.show("更新成功");
				this.currentState='list';
				search();
			}
			protected function loadTaskInfoById_resultHandler(event:ResultEvent):void
			{
				form=event.result as TaskModel;
				content.text=form.content;								
				title.text=form.title;
				assigner_id.text=form.assignerId;
				accounts_id.text=form.workerIds;
				if(form.workerIds!=null&&form.workerIds!=""){
					var attr:Array=form.workerIds.split(";");
					for(var i:int;i<attr.length;i++){
						if(attr[i]!=null&&attr[i]!=""){
							accounts.selectedItems.addItem(this.parentApplication.getItemByAccountId(attr[i]));
						}
					}
				}
				assigner.selectedItem=this.parentApplication.getItemByAccountId(form.assignerId);
			}
			
			protected function deleteTaskByIdResult_resultHandler(event:ResultEvent):void
			{
				if(event.result as Boolean==true){
					Alert.show("删除成功");
				}else{
					Alert.show("无法删除");
				}
				search();
			}			
			
			
			protected function getTasksByConditions_resultHandler(event:ResultEvent):void
			{
//				var ps:PaginationSupport = event.result as PaginationSupport;
////				if(ps!=null)
////				taskTable.initPageData(ps.items as ArrayCollection,ps.currentPage,ps.totalPage,ps.totalCount);
////				else taskTable.initPageData(null,0,0,0);\
//				if(ps!=null){
					var list:ArrayCollection=event.result as ArrayCollection;
					Alert.show(list.length+"");
					taskTable.initdata(list);
					//Alert.show(ps.totalCount+"");
//				}
				unLockWin();

			}
			private function search():void{
				lockWin();
				var s_workerIds:String=search_accounts_id.text;
				var s_assignerId:String=search_assigner_id.text;
				var s_status:String=search_state.selectedItem.data;
				var s_beginDate:String=search_date_begin.text;
				var s_endDate:String=search_date_end.text;
//				var s_index:int=taskTable.curpage+1;
//				var s_pageSize:int=taskTable.pagecount;
//				Alert.show(s_index+"a");
//				Alert.show(s_pageSize+"b");
				taskServiceRO.getTasksByConditions(s_assignerId, s_workerIds,s_status,s_beginDate,s_endDate);
			}
			private function addInit():void{
				postButton.label="指派";
			}
			public function enterAdd(type:int):void{
				addUpdateFlag.text="add";
				this.currentState='add';
			}
			
			public function editInit(id:String):void{
				taskServiceRO.loadTaskInfoById(id);
				postButton.label="更新";
			}
			
			public function enterEdit(id:String):void{
				addUpdateFlag.text="update"+"_"+id;
				this.currentState='add';
			}
			
			public function deleteTask(id:String):void{
				Alert.show("你确定要删除该任务吗?","确认",Alert.YES | Alert.NO,null,function(event:CloseEvent):void{
					if(event.detail == Alert.YES)
					{
						taskServiceRO.deleteTaskById(id);
					}
				});
			}
			
			//public function detailTask(id:String):void{
				//var parent:Object=(Object)(((Object)(this.owner)).owner);
				//parent.addTab("taskDetial","查看任务",parent.nav,"oa/task/taskDetail.swf",null,id);
			//}
			
			protected function add_activateHandler(event:Event):void
			{
				if(addUpdateFlag.text=="add")
					addInit();
				else {
					var id:String=addUpdateFlag.text.split("_")[1];
					editInit(id);
				}
			}
			
			protected function add_clickHandler(event:MouseEvent):void
			{
				if(validateInput())
				{
					if(addUpdateFlag.text=="add"){
						form.content = content.text;								
						form.title = title.text;
						form.assignerId=assigner_id.text;
						form.workerIds=accounts_id.text;
						form.postTime=new Date();
						form.status=0;
						
						taskServiceRO.addTask(form);
					}else{
						form.content = content.text;								
						form.title = title.text;
						form.assignerId=assigner_id.text;
						form.workerIds=accounts_id.text;
						form.lastEditorId=this.parentApplication.currentUser.id;
						taskServiceRO.updateTask(form);
					}
					this.currentState='list';
					search();
				}
			}
			
			private function validateInput():Boolean
			{	
				validatorArr = new Array();
				validatorArr.push(title_stringValidator);
				validatorArr.push(content_stringValidator);
				validatorArr.push(accounts_id_stringValidator);
				validatorArr.push(assigner_id_stringValidator);
				var validatorErrorArray:Array = Validator.validateAll(validatorArr);
				var isValidForm:Boolean = validatorErrorArray.length == 0;
				if (isValidForm) {
					return true;
				} else {
					if( title.text==null||title.text==""){
						title.dispatchEvent(new MouseEvent( MouseEvent.MOUSE_OVER , true,true));
					}
					if( content.text==null||content.text==""){
						content.dispatchEvent(new MouseEvent( MouseEvent.MOUSE_OVER , true,true));
					}
					if( accounts_id.text==null||accounts_id.text==""){
						accounts_id.dispatchEvent(new MouseEvent( MouseEvent.MOUSE_OVER , true,true));
					}
					if( assigner_id.text==null||assigner_id.text==""){
						assigner_id.dispatchEvent(new MouseEvent( MouseEvent.MOUSE_OVER , true,true));
					}
					return false;
				}
			}
			
			private function searchAccountsHandleAutoCompleteChange():void
			{
				var items:ArrayCollection = search_accounts.selectedItems;
				search_accounts_id.text="";
				for(var i:int=0;i<items.length;i++){
					var item:Object=items.getItemAt(i);
					if (item != null && item.hasOwnProperty( "id" ))
					{
						search_accounts_id.text+=item.id+";";
					} else{
						search_accounts_id.text+=";";
					}             
				}
				

			}
			private function searchAssignerHandleAutoCompleteChange():void
			{
				var item:Object = search_assigner.selectedItem;
				
				if (item != null && item.hasOwnProperty( "id" ))
				{
					search_assigner_id.text=item.id;
				} else{
					search_assigner_id.text="";
				}               
			}
			private function accountsHandleAutoCompleteChange():void
			{
				var items:ArrayCollection = accounts.selectedItems;
				accounts_id.text="";
				for(var i:int=0;i<items.length;i++){
					var item:Object=items.getItemAt(i);
					if (item != null && item.hasOwnProperty( "id" ))
					{
						accounts_id.text+=item.id+";";
					} else{
						accounts_id.text+=";";
					}             
				}
				//Alert.show(accounts_id.text);
				  
			}
			private function assignerHandleAutoCompleteChange():void
			{
				var item:Object = assigner.selectedItem;
				
				if (item != null && item.hasOwnProperty( "id" ))
				{
					assigner_id.text=item.id;
				} else{
					assigner_id.text="";
				}  
				//Alert.show(assigner_id.text);
			}
			private var window:WlzxLockWin=null;
			private function lockWin():void{
				if(window==null){
					window=WlzxLockWin(PopUpManager.createPopUp(this,WlzxLockWin,true)); 
					PopUpManager.centerPopUp(window);
					window.percentHeight=100;
					window.percentWidth=100;
				}		
				
			}
			private function unLockWin():void{
				if(window!=null)
					PopUpManager.removePopUp(window);
			}
			public 	 function getWorkers(data:Object, column:DataGridColumn):String{
				if(data!=null){
					var result1:String="";
					var ids:String=data.workerIds;
					
					if(ids!=null&&ids!=""){
						var attr:Array=ids.split(";");
						for(var i:int=0;i<attr.length;i++){
							[Binary]var temp:String=attr[i] as String;
							
							if(temp==null||temp=="")continue;
							var name:String=this.parentApplication.getTeacherNameByAccountId(temp);
							if(data.title=="a"){
								Alert.show(name);
								Alert.show(temp);
							}
							result1=result1.concat(name+"  ");
							
						}
						return result1;
					}else return null;
					//Alert.show(result);
					
				}else return null;
			}
			public 	 function getAssigner(data:Object, column:DataGridColumn):String{
				var result2:String="";
				var id:String=data.assignerId;
				//Alert.show(ids);
				if(id!=null&&id!=""){
					result2+=this.parentApplication.getTeacherNameByAccountId(id);
				}
				//Alert.show(result);
				return result2;
			}
		]]> 		
	</mx:Script> 
	<mx:Component id="searchAccountsDropDownItemRenderer">
		<render:AdvancedItemRenderer selectedItems="{ outerDocument.search_accounts.selectedItems }" />
	</mx:Component>
	<mx:Component id="searchAssignerDropDownItemRenderer">
		<render:AdvancedItemRenderer selectedItems="{ outerDocument.search_assigner.selectedItems }" />
	</mx:Component>
	<mx:Component id="accountsDropDownItemRenderer">
		<render:AdvancedItemRenderer selectedItems="{ outerDocument.accounts.selectedItems }" />
	</mx:Component>
	<mx:Component id="assignerDropDownItemRenderer">
		<render:AdvancedItemRenderer selectedItems="{ outerDocument.assigner.selectedItems }" />
	</mx:Component>
	
		<mx:VBox width="100%" height="100%" id="listPanel">
			<mx:HBox verticalAlign="middle" horizontalAlign="right" width="100%" fontSize="12"  >
				<mx:HBox width="100%" height="30" paddingLeft="20"  horizontalGap="0" backgroundColor="#C5E497"  verticalAlign="middle" id="toolBar">
					<mx:Label text="|"/>
					<mx:LinkButton  label="新建" icon="@Embed(source='../WebContent/resources/common/tools/button_add_icon.png')"    click="this.currentState='add';" />
					<mx:Label text="|"/>
				</mx:HBox>
			</mx:HBox>
			<mx:VBox width="100%" height="100%"  verticalGap="10" verticalAlign="middle" horizontalAlign="center" >
				<mx:VBox width="100%"  horizontalGap="10" verticalAlign="middle" horizontalAlign="left" borderVisible="true" paddingTop="0" paddingBottom="0"   paddingLeft="10" paddingRight="10">
					<mx:FormHeading label="条件查询">
					</mx:FormHeading>
					
					<mx:HBox>
						<mx:HBox width="100%">
							<mx:Label  text="任务状态"  width="100"  textAlign="right"/>
							<mx:ComboBox id="search_state"  dataProvider="{taskStateList}" selectedIndex="0"  editable="false" width="80"/>
						</mx:HBox>
						<mx:HBox verticalAlign="middle">
							<mx:Label  text="起始日期"  width="100"  textAlign="right"/>
							<mx:DateField id="search_date_begin"   formatString="YYYY-MM-DD"  editable="false" width="120"/>
							<mx:Label  text="--"  width="20" textAlign="center"/>
							<mx:DateField id="search_date_end"  formatString="YYYY-MM-DD" editable="false" width="120"/>
						</mx:HBox>
					</mx:HBox>
					<mx:HBox width="100%">
						<mx:HBox verticalAlign="middle">
							<mx:Label  text="责任人"  width="100"  textAlign="right"/>
							<hc:AutoComplete id="search_accounts"  labelField="name"  width="300" allowMultipleSelection="true"   matchType="anyPart" prompt="选择"  change="{ searchAccountsHandleAutoCompleteChange() }" dropDownItemRenderer="{ searchAccountsDropDownItemRenderer }" selectedItemStyleName="none">
							</hc:AutoComplete>
							<mx:Label id="search_accounts_id" visible="false">
							</mx:Label>
						</mx:HBox>	
						<mx:HBox verticalAlign="middle">
							<mx:Label  text="指派人"  width="100"  textAlign="right"/>
							<hc:AutoComplete id="search_assigner"  labelField="name"  width="100"  matchType="anyPart" prompt="选择"  change="{ searchAssignerHandleAutoCompleteChange() }" dropDownItemRenderer="{ searchAssignerDropDownItemRenderer }" selectedItemStyleName="none">
							</hc:AutoComplete>
							<mx:Label id="search_assigner_id" visible="false">
							</mx:Label>
						</mx:HBox>	
						<mx:Button  label="搜索"  width="70"   click="search()"/>
					</mx:HBox>
					
				</mx:VBox>
				<mx:HBox width="100%" height="100%" paddingLeft="10" paddingRight="10" paddingBottom="10" paddingTop="0">
					<mx:Panel width="100%" height="100%"  styleName="customPanel" title="查询结果"  cornerRadius="5" borderVisible="false" dropShadowVisible="false">
						
						<component:WlzxPageDataGrid width="100%" height="100%"   borderVisible="false"  autoLayout="true"  borderAlpha="0.2" verticalAlign="middle"   id="taskTable" pagecount="10"  >				
							<component:mygridcolumns>
								<mx:DataGridColumn textAlign="center" headerText="任务主题" width="100">
									<mx:itemRenderer>
										<mx:Component>
											<mx:HBox width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" >
												<mx1:Text text="{data.title}" width="100">
												</mx1:Text>
											</mx:HBox>
										</mx:Component>
									</mx:itemRenderer>
								</mx:DataGridColumn>
								<mx:DataGridColumn textAlign="center" headerText="任务内容" width="200">
									<mx:itemRenderer>
										<mx:Component>
											<mx:HBox width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" >
												<mx1:Text text="{data.content}" width="100">
												</mx1:Text>
											</mx:HBox>
										</mx:Component>
									</mx:itemRenderer>
								</mx:DataGridColumn>
								<mx:DataGridColumn textAlign="center" headerText="发布时间" width="100" dataField="postTime" labelFunction="DateUtil.datagridFormatDate">
								</mx:DataGridColumn>
								<mx:DataGridColumn textAlign="center" headerText="责任人" width="100" dataField="workerIds" labelFunction="getWorkers">
									
								</mx:DataGridColumn>
								<mx:DataGridColumn textAlign="center" headerText="指派人" width="60" dataField="assignerId" labelFunction="getAssigner">
									
								</mx:DataGridColumn>
								
								<mx:DataGridColumn textAlign="center" headerText="状态" width="60">
									<mx:itemRenderer>
										<mx:Component>
											<mx:HBox width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" horizontalGap="0">
												<mx:Label text="{getStatus(data)}" width="60">
												</mx:Label>
												<mx:Script>
													<![CDATA[
														//提示信息
														
														import mx.controls.Alert;
														import mx.core.UIComponent;
														private function getStatus(data:Object):String{
															var result:String="";
															if(data.status=="0")result="进行中";
															else if(data.status=="1")result="已完成";
															//Alert.show(result);
															return result;
														}
													]]>
												</mx:Script>
											</mx:HBox>
										</mx:Component>
									</mx:itemRenderer>
								</mx:DataGridColumn>
								
								<mx:DataGridColumn textAlign="center" headerText="操作" width="100">
									<mx:itemRenderer>
										<mx:Component>
											<mx:HBox width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" horizontalGap="0">
												<mx:LinkButton  label="[编辑]"   click="{this.outerDocument.enterEdit(data.id);}" enabled="{checkAuth(data)}">											
												</mx:LinkButton>
												<mx:LinkButton  label="[删除]"   click="{this.outerDocument.deleteTask(data.id);}">											
												</mx:LinkButton>
												<mx:Script>
													<![CDATA[
														//提示信息
														import cn.org.rapid_framework.flex_security.SecurityControler;
														
														import mx.controls.Alert;
														import mx.core.UIComponent;
														private function checkAuth(data:Object):Boolean{
															if(data.status!=1)
																return true;
															else return false;
														}
													]]>
												</mx:Script>
											</mx:HBox>
										</mx:Component>
									</mx:itemRenderer>
								</mx:DataGridColumn>
								
							</component:mygridcolumns>
						</component:WlzxPageDataGrid>
					</mx:Panel>
				</mx:HBox>
			</mx:VBox>
		</mx:VBox>
		
		<mx:VBox width="100%" height="100%" id="addPanel">
			<mx:HBox verticalAlign="middle" horizontalAlign="right" width="100%" fontSize="12" id="returnArea">
				<mx:HBox width="100%" height="30" paddingLeft="20"  horizontalGap="0" backgroundColor="#C5E497"  verticalAlign="middle">
					<mx:Label text="|"/>
					<mx:LinkButton  label="返回" icon="@Embed(source='../WebContent/resources/common/tools/button_back_icon.png')" click="this.currentState='list';" />
					<mx:Label text="|"/>
				</mx:HBox>
				
			</mx:HBox>
			<mx:VBox width="100%" height="100%"   horizontalGap="10" verticalAlign="middle" horizontalAlign="left" borderVisible="true" paddingTop="10" paddingBottom="10"   paddingLeft="10" paddingRight="10">
				<mx:VBox  width="100%" height="100%">
					<mx:Form width="100%" height="100%">
						<mx:FormItem label="任务标题" width="100%">
							<mx:TextInput width="100%" id="title"/>
						</mx:FormItem>
						<mx:FormItem label="任务责任人" width="100%">
							<hc:AutoComplete id="accounts"  labelField="name"  width="300"  matchType="anyPart"  allowMultipleSelection="true"  prompt="选择"  change="{ accountsHandleAutoCompleteChange() }" dropDownItemRenderer="{ accountsDropDownItemRenderer }" selectedItemStyleName="none">
							</hc:AutoComplete>
							<mx:Label id="accounts_id" visible="false">
							</mx:Label>
						</mx:FormItem>
						
						<mx:FormItem label="任务内容" width="100%" height="100%">
							<mx:TextArea width="100%" height="100%" text=""  id="content">
								
							</mx:TextArea>
							
						</mx:FormItem>
						<mx:FormItem label="任务指派人" width="100%">
							<hc:AutoComplete id="assigner"  labelField="name"  width="300"  matchType="anyPart" prompt="选择"  change="{ assignerHandleAutoCompleteChange() }" dropDownItemRenderer="{ assignerDropDownItemRenderer }" selectedItemStyleName="none">
							</hc:AutoComplete>
							<mx:Label id="assigner_id" visible="false">
							</mx:Label>
						</mx:FormItem>
					</mx:Form>
				</mx:VBox>
				<mx:HBox horizontalAlign="right" width="100%">
					<mx:Label id="addUpdateFlag" visible="false" text="add"/>
					<mx:Button label="指派" id="postButton" click="add_clickHandler(event)"/>
				</mx:HBox>
			</mx:VBox>
		</mx:VBox>
</mx:Module>
